Hint 1 
 Try to find a characterization of all great grids. 
Hint 2 
 There are two approaches that lead to the same conclusion. Approach 1 is more clever and leads more easily to the conclusion, while approach 2 is perhaps more natural to consider. Feel free to read the hint towards the approach that sounds better. Hint Towards Approach 1Think of the letters as numbers modulo 3 and look at differences of adjacent cells. Hint Towards Approach 2Draw a / or \ for each 2×2 subgrid connecting the equal letters, and look for patterns. 
Hint 3 
 In either approach, we can associate a type to each row and column, which has one of two possibilities. The constraints correspond to a row and a column needing to have the same or different types. 
Hint 4 
 The problem reduces to checking the 2-colourability of a graph. 
Solution 
 1844E - Great GridsWe present two approaches.Approach 1Let the letters 'A', 'B', and 'C' correspond to the numbers 0, 1, and 2 modulo 3 respectively. Consider drawing an arrow between any two adjacent cells in a great grid pointing to the right or down, and label this arrow with the difference of the two cells modulo 3.The conditions imply that all labels are 1 or 2, and in each contiguous 2×2 subgrid, the top arrow has the same label as the bottom arrow, and the left arrow has the same label as the right arrow. Hence we can associate a type to each of n−1 rows and m−1 columns which is its label. A constraint for cells (x,y) and (x+1,y+1) means that row x and column y must have different labels, and a constraint for cells (x,y+1) and (x+1,y) means that row x and y must have the same label.These relations form a graph, and the problem reduces to a variant of 2-colourability, which can be checked using DFS or a DSU.Approach 2In a great grid, draw a '/' or '\' for each 2×2 subgrid connecting the equal letters.We can observe that these grids have a simple pattern: every two rows are either the same or opposite. Furthermore, any such pattern corresponds to a great grid (this can be proven with the idea in approach 1). We can associate a type to each row and column, a boolean variable 0 or 1, such that an entry is '/' or '\' depending on whether the labels are the same or different.The constraints correspond to entries needing to be '/' or '\', forming a graph of pairs of labels that must be the same or different. Thus the problem reduces to a variant of 2-colourability, which can be checked using DFS or a DSU.The intended time complexity is O(n+m+k), although slower implementations with complexities like O(nm+k) or O(k(n+m)) can also pass. 
Implementation 
 #include <bits/stdc++.h>
using namespace std;
typedef vector<pair<int,int> > vpii;
#define mp make_pair
#define pb push_back

vpii adjList[4000];
int colour[4000],bad = 0;
int doDFS(int u,int c) {
    if (colour[u] != -1) {
        if (colour[u] != c) bad = 1;
        return 0;
    }
    colour[u] = c;
    for (auto [v,e]: adjList[u]) doDFS(v,c^e);
    return 0;
}
int main() {
    int i;
    int t,n,m,k;
    int x1,y1,x2,y2;
    scanf("%d",&t);
    while (t--) {
        scanf("%d %d %d",&n,&m,&k);
        for (i = 0; i < k; i++) {
            scanf("%d %d %d %d",&x1,&y1,&x2,&y2);
            x1--,y1--,x2--,y2--;
            adjList[min(x1,x2)].pb(mp(n+min(y1,y2),(x1+y1 != x2+y2)));
            adjList[n+min(y1,y2)].pb(mp(min(x1,x2),(x1+y1 != x2+y2)));
        }

        fill(colour,colour+n+m,-1),bad = 0;
        for (i = 0; i < n+m; i++) {
            if (colour[i] == -1) doDFS(i,0);
        }
        printf(bad ? "NO\n":"YES\n");

        for (i = 0; i < n+m; i++) adjList[i].clear();
    }
    return 0;
} 
