Problem 1844/H
Hint 1 
 The partially formed permutation is composed of several paths and cycles. Only the length of each path/cycle modulo 3 matters. 
Hint 2 
 The problem reduces to the following: Given a 1s, b 2s, and c 0s, how many ways are there to build a permutation on these objects so that each cycle sums to a multiple of 3? Let f(a,b,c) be the answer. Write some dynamic programming recurrences for f(a,b,c). 
Hint 3 
 Note that f(a,b,c)=(a+b+c)f(a,b,c−1) (choose the next object of any 0 and merge them).  Why is this useful?This allows us to eliminate the c parameter, multiplying the answer by a factorial and inverse factorial. 
Hint 4 
 Let f(a,b)=f(a,b,0). Write down not one, but two recurrence relations f(a,b) satisfies. What are the recurrences?We have f(a,b)=b(a+b−1)f(a−1,b−1)+(a−1)f(a−2,b+1) when a>0 (choose the next object of any 1 and merge them) and also f(a,b)=a(a+b−1)f(a−1,b−1)+(b−1)f(a+1,b−2) when b>0 (choose the next object of any 2 and merge them). 
Hint 5 
 These recurrences mean that given any two of f(a,b),f(a−1,b−1),f(a+2,b−1),f(a−1,b+2), we can solve for the other two. 
Hint 6 
 Consider the pairs (a,b) that arise from the n queries. These pairs can be visualized as a walk in the plane, where each each pair does not differ from the previous pair by much. If we carefully use the recurrences to solve for values of f(a,b) from values we already know, we can answer all queries on this walk while calculating only O(n) values of f(a,b). 
Solution 
 1844H - Multiple of Three CyclesThe partially formed permutation is composed of several paths and cycles, and only the length of each path/cycle modulo 3 matters. We can use a DSU to track the number of paths/cycles of each length (mod3). If at any point a cycle whose length is not ≡0(mod3) is formed, the answer is 0.Thus, the problem reduces to the following:   Given a 1s, b 2s, and c 0s, how many ways are there to build a permutation on these objects so that each cycle sums to a multiple of 3? Let f(a,b,c) be the answer to this problem. Note that f(a,b,c)=(a+b+c)f(a,b,c−1) for c>0, as there are a+b+c ways to choose the next object of any 0, and after merging this 0 with its next object, there are f(a,b,c−1) ways to build a permutation on the remaining objects. Repeatedly applying this recurrence gives f(a,b,c)=(a+b+c)!(a+b)!f(a,b,0), so we can eliminate the c parameter and multiply the answer by a factorial and inverse factorial in the end.Now let f(a,b)=f(a,b,0). We have not one, but two recurrence relations f(a,b) satisfies:   f(a,b)=bf(a−1,b−1,1)+(a−1)f(a−2,b+1)=b(a+b−1)f(a−1,b−1)+(a−1)f(a−2,b+1) when a>0 (consider the next object of any 1)  f(a,b)=af(a−1,b−1,1)+(b−1)f(a+1,b−2)=a(a+b−1)f(a−1,b−1)+(b−1)f(a+1,b−2) when b>0 (consider the next object of any 2) The key idea now is that because we have two equations relating the four values f(a,b),f(a−1,b−1),f(a+2,b−1),f(a−1,b+2), given any two of these values, we can solve for the other two. For example, if we know f(a,b) and f(a−1,b−1), we can calculate f(a−2,b+1)=f(a,b)−b(a+b−1)f(a−1,b−1)a−1. Also note that the queried pairs (a,b) can be visualized as a walk in the plane, where each pair does not differ from the previous pair by much. By using these recurrences carefully, it is possible to calculate f(a,b) for all queries (a,b) while calculating only O(n) values of f.The details can be tricky. The author's solution does the following: First, reverse the order of the updates, possibly adding dummy updates if a cycle whose length is not ≡0(mod3) is created early. Then we need to find f(ai,bi) for a sequence of pairs (a1,b1),(a2,b2),… where (a1,b1)=(0,0) and (ai+1,bi+1) is one of (ai,bi), (ai−1,bi+2), (ai+2,bi−1), or (ai+1,bi+1) for all i. We loop through i in order, maintaining two values u:=f(ai,bi) and v:=f(ai+1,bi+1) at all times. Whenever we need a transition of the form (ai,bi)→(ai−1,bi+2), we use the recurrence f(ai+1,bi+1)=(bi+1)(ai+bi+1)f(ai,bi)+aif(ai−1,bi+2) to solve for f(ai−1,bi+2) (the new value of u), then use the recurrence f(ai,bi+3)=ai(ai+bi+2)f(ai−1,bi+2)+(bi+2)f(ai+1,bi+1) to find f(ai,bi+3) (the new value of v). The (ai,bi)→(ai+2,bi−1) transition is similar. For (ai,bi)→(ai+1,bi+1) transitions, do both of the previous types of transitions once.The time complexity of the main part of the problem is O(N). The overall time complexity is O(Nα(N)), dominated by the DSU operations.Remark 1: Since 1s and 2s behave symmetrically, f(a,b,c)=f(b,a,c).Remark 2: The exponential generating function for f(a,b) is ∑a≥0∑b≥0f(a,b)a!b!xayb=(1−(x3+3xy+y3))−1/3. 
Implementation 
 #include <bits/stdc++.h>
using namespace std;
typedef long long int LLI;
#define MOD 998244353

int parent[300000],siz[300000];
int find(int n) {
    if (parent[n] != n) parent[n] = find(parent[n]);
    return parent[n];
}
int queries[600000][3],ans[600000];
int fact[300000],invfact[300000],invn[300000];
int inv(int n) {
    int e = MOD-2,r = 1;
    while (e > 0) {
        if (e & 1) r = ((LLI) r*n) % MOD;
        e >>= 1;
        n = ((LLI) n*n) % MOD;
    }
    return r;
}
int main() {
    int i;
    int n,x,y,bad = 1e9;
    int num[3];
    scanf("%d",&n);
    for (i = 0; i < n; i++) parent[i] = i,siz[i] = 1;
    num[0] = 0,num[1] = n,num[2] = 0;
    for (i = 0; i < n; i++) {
        scanf("%d %d",&x,&y);
        x--,y--;
        if (find(x) != find(y)) {
            num[siz[find(x)] % 3]--;
            num[siz[find(y)] % 3]--;
            siz[find(y)] += siz[find(x)];
            parent[find(x)] = find(y);
            num[siz[find(y)] % 3]++;
        }
        else if ((siz[find(x)] % 3) == 0) num[0]--;
        else if (bad == 1e9) bad = i;
        copy(num,num+3,queries[i]);
    }

    fact[0] = 1;
    for (i = 1; i < n; i++) fact[i] = ((LLI) i*fact[i-1]) % MOD;
    invfact[n-1] = inv(fact[n-1]);
    for (i = n-2; i >= 0; i--) invfact[i] = ((LLI) (i+1)*invfact[i+1]) % MOD;
    for (i = 1; i < n; i++) invn[i] = ((LLI) invfact[i]*fact[i-1]) % MOD;

    int m = n;
    while (num[1]+num[2] > 0) {
        int a = (num[1] > 0) ? 1:2;
        num[a]--;
        int b = (num[1] > 0) ? 1:2;
        num[b]--;
        num[(a+b) % 3]++;
        copy(num,num+3,queries[m++]);
    }
    x = 1,y = 1;
    int u = 1,v = 8;
    auto f = [&]() {
        assert(x > 0);
        int nu = (((v-(((LLI) (y+1)*(x+y+1)) % MOD)*u) % MOD)*invn[x]) % MOD;
        int nv = ((((LLI) x*(x+y+2)) % MOD)*nu+(LLI) (y+2)*v) % MOD;
        x--,y += 2,u = nu,v = nv;
        if (u < 0) u += MOD;
        if (v < 0) v += MOD;
    };
    auto g = [&]() {
        assert(y > 0);
        int nu = (((v-(((LLI) (x+1)*(x+y+1)) % MOD)*u) % MOD)*invn[y]) % MOD;
        int nv = ((((LLI) y*(x+y+2)) % MOD)*nu+(LLI) (x+2)*v) % MOD;
        x += 2,y--,u = nu,v = nv;
        if (u < 0) u += MOD;
        if (v < 0) v += MOD;
    };
    for (i = m-1; i >= 0; i--) {
        int a = queries[i][1],b = queries[i][2],c = queries[i][0];
        if ((a == 0) && (b == 0)) ans[i] = 1;
        else if ((a == x) && (b == y)) ans[i] = u;
        else if ((a == x-1) && (b == y+2)) f(),ans[i] = u;
        else if ((a == x+2) && (b == y-1)) g(),ans[i] = u;
        else if ((a == x+1) && (b == y+1)) {
            if (x > 0) f(),g(),ans[i] = u;
            else g(),f(),ans[i] = u;
        }
        else assert(0);
        ans[i] = ((LLI) ans[i]*fact[a+b+c]) % MOD;
        ans[i] = ((LLI) ans[i]*invfact[a+b]) % MOD;
    }
    for (i = 0; i < n; i++) printf("%d\n",(i >= bad) ? 0:ans[i]);

    return 0;
} 
