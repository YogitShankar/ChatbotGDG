Title: E. Haystacks
Statement:

There are
n
haystacks labelled from
1
to
n
, where haystack
i
contains
ai
haybales. One of the haystacks has a needle hidden beneath it, but you do not know which one. Your task is to move the haybales so that each haystack is emptied at least once, allowing you to check if the needle is hidden under that particular haystack.
However, the process is not that simple. Once a haystack
i
is emptied for the first time, it will be assigned a height limit and can no longer contain more than
bi
haybales. More formally, a move is described as follows:
Note: Before a haystack is emptied, it has no height limit, and you can move as many haybales as you want onto that haystack.
Compute the minimum number of moves required to ensure that each haystack is emptied at least once, or report that it is impossible.
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤104
). The description of the test cases follows.
The first line of each test case contains a single integer
n
(
2≤n≤5⋅105
) — the number of haystacks.
The
i
-th of the next
n
lines contains two integers
ai
and
bi
(
1≤ai,bi≤109
) — the initial number of haybales in the
i
-th haystack, and the height limit that it is assigned after it is emptied for the first time.
It is guaranteed that the sum of
n
over all test cases does not exceed
5⋅105
.
For each test case, print a single integer — the minimum number of moves required to ensure that each haystack is emptied at least once. If it is not possible to empty each haystack at least once, output -1.
In the first test case, we can do the following sequence of moves:
The above sequence requires
3+5=8
moves. It is not possible to use less than
8
moves as the following sequence of moves is invalid:
In the second test case, the task is impossible. This is because the height limits of both haystacks are too small that once one of the haystacks is emptied, the other haystack cannot be emptied due to the small height limits.
In the third test case, the following sequence of moves can be shown to be optimal:
The above sequence requires
1+3+1+3=8
moves.
Input Specification:
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤104
). The description of the test cases follows.
The first line of each test case contains a single integer
n
(
2≤n≤5⋅105
) — the number of haystacks.
The
i
-th of the next
n
lines contains two integers
ai
and
bi
(
1≤ai,bi≤109
) — the initial number of haybales in the
i
-th haystack, and the height limit that it is assigned after it is emptied for the first time.
It is guaranteed that the sum of
n
over all test cases does not exceed
5⋅105
.
Output Specification:
Output
For each test case, print a single integer — the minimum number of moves required to ensure that each haystack is emptied at least once. If it is not possible to empty each haystack at least once, output -1.
Sample Tests:
Example
input
Copy
7
2
3 5
2 4
2
10 1
1 10
3
1 3
4 3
1 1
3
5 4
2 4
1 10
6
2 1
3 3
5 4
1 5
1 6
1 8
5
3 2
1 2
1 1
1 3
6 5
2
5 10
7 12
output
Copy
8
-1
8
9
14
15
19
Constraints: time limit per test2 seconds memory limit per test256 megabytes
