Title: I2. Affectionate Arrays (Hard Version)
Statement:

Note that this statement is different to the version used in the official round. The statement has been corrected to a solvable version. In the official round, all submissions to this problem have been removed.
This is the hard version of the problem. The difference between the versions is that in this version, you need to compute the sum of value of different arrays. You can hack only if you solved all versions of this problem.
Iris treasures an integer array
a1,a2,…,an
. She knows this array has an interesting property: the maximum absolute value of all elements is less than or equal to the sum of all elements, that is,
max(|ai|)≤∑ai
.
Iris defines the boredom of an array as its maximum subarray
∗
sum.
Iris's birthday is coming, and Victor is going to send her another array
b1,b2,…,bm
as a gift. For some seemingly obvious reasons, he decides the array
b1,b2,…,bm
should have the following properties.
For a possible array
b1,b2,…,bm
satisfying all the conditions above, Victor defines the value of the array as the number of occurrences of array
a
as subsequences in array
b
. That is, he counts the number of array
c1,c2,…,cn
that
1≤c1<c2<…<cn≤m
and for all integer
i
that
1≤i≤n
,
bci=ai
is satisfied, and let this be the value of array
b
.
Even constrained as above, there are still too many possible gifts. So Victor asks you to calculate the sum of value of all possible arrays
b1,b2,…,bm
. Since the answer may be large, Victor only needs the number modulo
998244353
. He promises you: if you help him successfully, he will share a bit of Iris's birthday cake with you.
∗
An array
c
is a subarray of an array
d
if
c
can be obtained from
d
by the deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.
†
A sequence
c
is a subsequence of a sequence
d
if
c
can be obtained from
d
by the deletion of several (possibly, zero or all) element from arbitrary positions.
Each test contains multiple test cases. The first line of input contains an integer
t
(
1≤t≤105
) — the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤3⋅106
) — the length of the array
a1,a2,…,an
.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
−
10
9
≤
a
i
≤
10
9
) — the initial array. It is guaranteed that
max(|
a
i
|)≤∑
a
i
.
It is guaranteed that the sum of
n
over all test cases does not exceed
3⋅
10
6
.
For each test case, output a single line containing an integer: the sum of values of valid arrays
b
1
,
b
2
,…,
b
m
, modulo
998244353
.
In the first test case,
a=[1,2,3,4]
. The only possible array
b
is
[1,2,3,4]
, and its value is
1
.
In the second test case,
a=[2,−3,2,2]
. The possible arrays
b
are
[1,2,−3,2,−1,2]
and
[2,1,−3,2,−1,2]
. Both arrays have value
1
.
In the third test case,
a=[1,−2,2,1]
. The only possible array
b
is
[1,1,−2,2,−1,1]
. It has value
2
, because we can find arrays
c=[1,3,4,6]
or
[2,3,4,6]
. That is, the array
a
occurs twice in
b
, so the answer is
2
.
Input Specification:
Input
Each test contains multiple test cases. The first line of input contains an integer
t
(
1≤t≤
10
5
) — the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤3⋅
10
6
) — the length of the array
a
1
,
a
2
,…,
a
n
.
The second line of each test case contains
n
integers
a
1
,
a
2
,…,
a
n
(
−
10
9
≤
a
i
≤
10
9
) — the initial array. It is guaranteed that
max(|
a
i
|)≤∑
a
i
.
It is guaranteed that the sum of
n
over all test cases does not exceed
3⋅
10
6
.
Output Specification:
Output
For each test case, output a single line containing an integer: the sum of values of valid arrays
b
1
,
b
2
,…,
b
m
, modulo
998244353
.
Sample Tests:
Example
input
Copy
5
4
1 2 3 4
4
2 -3 2 2
4
1 -2 2 1
10
2 -7 6 3 -1 4 2 -5 8 -4
20
4 -2 4 3 -2 1 5 2 3 6 -5 -1 -4 -2 -3 5 -3 1 -4 1
output
Copy
1
2
2
20
1472
Constraints: time limit per test3 seconds memory limit per test512 megabytes
