Title: B. Outstanding Impressionist

Statement:
Even after copying the paintings from famous artists for ten years, unfortunately, Eric is still unable to become a skillful impressionist painter. He wants to forget something, but the white bear phenomenon just keeps hanging over him.
Eric still remembers
n
pieces of impressions in the form of an integer array. He records them as
w
1
,
w
2
,…,
w
n
. However, he has a poor memory of the impressions. For each
1≤i≤n
, he can only remember that
l
i
≤
w
i
≤
r
i
.
Eric believes that impression
i
is unique if and only if there exists a possible array
w
1
,
w
2
,…,
w
n
such that
w
i
≠
w
j
holds for all
1≤j≤n
with
j≠i
.
Please help Eric determine whether impression
i
is unique for every
1≤i≤n
, independently for each
i
. Perhaps your judgment can help rewrite the final story.
Each test contains multiple test cases. The first line of the input contains a single integer
t
(
1≤t≤
10
4
) — the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤2⋅
10
5
) — the number of impressions.
Then
n
lines follow, the
i
-th containing two integers
l
i
and
r
i
(
1≤
l
i
≤
r
i
≤2⋅n
) — the minimum possible value and the maximum possible value of
w
i
.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.
For each test case, output a binary string
s
of length
n
: for each
1≤i≤n
, if impression
i
is unique,
s
i
=1
; otherwise,
s
i
=0
. Do not output spaces.
In the first test case, the only possible array
w
is
[1,1]
, making neither impression
1
nor
2
unique (since
w
1
=
w
2
).
In the second test case, all impressions can be made unique:
In the third test case, for
i=4
, we can set
w
to
[3,2,2,1,3,2]
. Thus, impression
4
is unique.

Input Specification:
Input
Each test contains multiple test cases. The first line of the input contains a single integer
t
(
1≤t≤
10
4
) — the number of test cases. The description of test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤2⋅
10
5
) — the number of impressions.
Then
n
lines follow, the
i
-th containing two integers
l
i
and
r
i
(
1≤
l
i
≤
r
i
≤2⋅n
) — the minimum possible value and the maximum possible value of
w
i
.
It is guaranteed that the sum of
n
over all test cases does not exceed
2⋅
10
5
.

Output Specification:
Output
For each test case, output a binary string
s
of length
n
: for each
1≤i≤n
, if impression
i
is unique,
s
i
=1
; otherwise,
s
i
=0
. Do not output spaces.

Sample Tests:
Example
input
Copy
5
2
1 1
1 1
4
1 3
1 3
1 3
1 3
6
3 6
2 2
1 2
1 1
3 4
2 2
7
3 4
4 4
4 4
1 3
2 5
1 4
2 2
3
4 5
4 4
5 5
output
Copy
00
1111
100110
1001111
011

Constraints:
Time: time limit per test1 second
Memory: memory limit per test256 megabytes

Tags: binary search, brute force, data structures, greedy, *1200

Editorial:

