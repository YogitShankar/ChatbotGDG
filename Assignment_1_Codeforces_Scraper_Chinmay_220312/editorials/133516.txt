Thank you all for participating in the round!We apologize for the wrong checker in problem E at the beginning of the contest, as well as the weak tests in problem B. To be honest, all the hacked submissions have similar logic and codes in B, which made me suspicious. Anyway, we are sorry for the inconvenience! >_< Rating Predictions     A B C D E F G H I     Error_Yuan 800 1200 1600 2100 2300 2600 3000 3400 3500   sszcdjr 800 1100 1600 2000 2300 2600 2900 3300 3500   wyrqwq 800 1000 1400 2200 2300 2600 3000 3500 3500   Otomachi_Una 800 1000 1600 2200 2400 2600 3200 3500 3500   dXqwq 900 1100 1700 2200 2400 2600 3200 3500 3500   Kubic 800 1000 1600 2400 2200 2800 3000 3500 3300   wsc2008qwq 800 1100 1600 1900 2200 2700 3100       chromate00 800 1000 1600 1900             rui_er 800 1000 1500 1800 2200 2500 3000       abc864197532 800 1100 1600 2200 2300 2500 2900             A B C D E F G H I     Average 810  1060  1580  2090  2289 2611  3033  3450  3467    Actual 800  1100  1700  1900  2100  2500  3000  3500  3400 (Thank you, rainboy)    2029A - SetAuthor: Otomachi_UnaFirst Blood: Benq at 00:00:51 HintGreedy from small to large. SolutionWe can delete the numbers from small to large. Thus, previously removed numbers will not affect future choices (if 𝑥<𝑦x<y, then 𝑥x cannot be a multiple of 𝑦y). So an integer 𝑥x (𝑙≤𝑥≤𝑟l≤x≤r) can be removed if and only if 𝑘⋅𝑥≤𝑟k⋅x≤r, that is, 𝑥≤⌊𝑟𝑘⌋x≤⌊rk⌋. The answer is max(⌊𝑟𝑘⌋−𝑙+1,0)max(⌊rk⌋−l+1,0).Time complexity: (1)O(1) per test case. Code (C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()
using namespace std;
using ll = long long;
using ull = unsigned long long;
 
const int _N = 1e5 + 5;
 
int T;
 
void solve() {
	int l, r, k; cin >> l >> r >> k;
	cout << max(r / k - l + 1, 0) << endl;
	return;
}
 
int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> T;
	while (T--) {
		solve();
	}
} Code (Python 3)for _ in range(int(input())):
    l, r, k = map(int, input().split())
    print(max(r // k - l + 1, 0)) Rate the Problem Amazing problem: 




35





 Good problem: 

    


147



 Average problem: 

    


119



 Bad problem: 

    


11



 Didn't solve: 

    


18



 2029B - ReplacementAuthor: wyrqwqFirst Blood: Benq at 00:02:30 Hint(𝟶𝟷01 or 𝟷𝟶10 exists) ⟺⟺ (both 𝟶0 and 𝟷1 exist). SolutionEach time we do an operation, if 𝑠s consists only of 𝟶0 or 𝟷1, we surely cannot find any valid indices. Otherwise, we can always perform the operation successfully. In the 𝑖i-th operation, if 𝑡𝑖=𝟶ti=0, we actually decrease the number of 𝟷1-s by 11, and vice versa. Thus, we only need to maintain the number of 𝟶0-s and 𝟷1-s in 𝑠s. If any of them falls to 00 before the last operation, the answer is NO, otherwise, the answer is YES.Time complexity: (𝑛)O(n) per test case. Code (C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()

using namespace std;
using ll = long long;

const int _N = 1e5 + 5;

void solve() {
	int n; cin >> n;
	string s, t; cin >> s >> t;
	int cnt0 = count(all(s), '0'), cnt1 = n - cnt0;
	for (int i = 0; i < n - 1; i++) {
		if (cnt0 == 0 || cnt1 == 0) {
			cout << "NO" << '\n';
			return;
		}
		if (t[i] == '1') cnt0--;
		else cnt1--;
	}
	cout << "YES" << '\n';
}

int main() {
	int T; cin >> T;
	while (T--) {
		solve();
	}
} Code (Python 3)for _ in range(int(input())):
    n = int(input())
    s = input()
    one = s.count("1")
    zero = s.count("0")
    ans = "YES"
    for ti in input():
        if one == 0 or zero == 0:
            ans = "NO"
            break
        one -= 1
        zero -= 1
        if ti == "1":
            one += 1
        else:
            zero += 1
    print(ans) Rate the Problem Amazing problem: 

    


64



 Good problem: 

    


217



 Average problem: 

    


26



 Bad problem: 

    


46



 Didn't solve: 

    


21



 2029C - New RatingAuthor: Error_YuanFirst Blood: ksun48 at 00:05:34 Solution 1 (with hints)Hint 1Binary search. Hint 2Do something backward. SolutionFirst, do binary search on the answer. Suppose we're checking whether the answer can be ≥𝑘≥k now.Let 𝑓𝑖fi be the current rating after participating in the 11-st to the 𝑖i-th contest (without skipping).Let 𝑔𝑖gi be the minimum rating before the 𝑖i-th contest to make sure that the final rating is ≥𝑘≥k (without skipping).𝑓𝑖fi-s can be calculated easily by simulating the process in the statement. For 𝑔𝑖gi-s, it can be shown that  𝑔𝑖={𝑔𝑖+1−1,𝑔𝑖+1+1,𝑎𝑖≥𝑔𝑖+1𝑎𝑖<𝑔𝑖+1gi={gi+1−1,ai≥gi+1gi+1+1,ai<gi+1where 𝑔𝑛+1=𝑘gn+1=k.Then, we should check if there exists an interval [𝑙,𝑟][l,r] (1≤𝑙≤𝑟≤𝑛1≤l≤r≤n), such that 𝑓𝑙−1≥𝑔𝑟+1fl−1≥gr+1. If so, we can choose to skip [𝑙,𝑟][l,r] and get a rating of ≥𝑘≥k. Otherwise, it is impossible to make the rating ≥𝑘≥k.We can enumerate on 𝑟r and use a prefix max to check whether valid 𝑙l exists.Time complexity: (𝑛log𝑛)O(nlog⁡n) per test case. Solution 2 (with hints)Hint 1Consider DP. Hint 2There are only three possible states for each contest: before, in, or after the skipped interval. SolutionConsider 𝑑𝑝𝑖,0/1/2=dpi,0/1/2= the maximum rating after the 𝑖i-th contest, where the 𝑖i-th contest is before/in/after the skipped interval.Let 𝑓(𝑎,𝑥)=f(a,x)= the result rating when current rating is 𝑎a and the performance rating is 𝑥x, then ⎧⎩⎨⎪⎪𝑑𝑝𝑖,0=𝑓(𝑑𝑝𝑖−1,0,𝑎𝑖),𝑑𝑝𝑖,1=max(𝑑𝑝𝑖−1,1,𝑑𝑝𝑖−1,0),𝑑𝑝𝑖,2=max(𝑓(𝑑𝑝𝑖−1,1,𝑎𝑖),𝑓(𝑑𝑝𝑖−1,2,𝑎𝑖)).{dpi,0=f(dpi−1,0,ai),dpi,1=max(dpi−1,1,dpi−1,0),dpi,2=max(f(dpi−1,1,ai),f(dpi−1,2,ai)).And the final answer is max(𝑑𝑝𝑛,1,𝑑𝑝𝑛,2)max(dpn,1,dpn,2).Time complexity: (𝑛)O(n) per test case. Code (Solution 1, C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()
using namespace std;
using ll = long long;
using ull = unsigned long long;

const int _N = 1e5 + 5;

int T;

void solve() {
	int n; cin >> n;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++) cin >> a[i];
	vector<int> pre(n + 1);
	int curf = 0;
	for (int i = 1; i <= n; i++) {
		if (curf < a[i]) curf++;
		else if (curf > a[i]) curf--;
		pre[i] = max(pre[i - 1], curf);
	}
	auto check = [&](int k) {
		int curg = k;
		for (int i = n; i >= 1; i--) {
			if (pre[i - 1] >= curg) return true;
			if (a[i] < curg) curg++;
			else curg--;
		}
		return false;
	};
	int L = 0, R = n + 1;
	while (L < R) {
		int mid = (L + R + 1) >> 1;
		if (check(mid)) L = mid;
		else R = mid - 1;
	}
	cout << L << '\n';
	return;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> T;
	while (T--) {
		solve();
	}
} Code (Solution 2, Python 3)for _ in range(int(input())):
    n = int(input())
    
    def f(a, x):
        return a + (a < x) - (a > x)
    
    dp = [0, -n, -n]
    for x in map(int, input().split()):
        dp[2] = max(f(dp[1], x), f(dp[2], x))
        dp[1] = max(dp[1], dp[0])
        dp[0] = f(dp[0], x)

    print(max(dp[1], dp[2])) Rate the Problem Amazing problem: 

    


365



 Good problem: 

    


89



 Average problem: 

    


20



 Bad problem: 

    


34



 Didn't solve: 

    


59



 2029D - Cool GraphAuthor: Error_YuanFirst Blood: ksun48 at 00:13:24There are many different approaches to this problem. Only the easiest one (at least I think so) is shared here. Hint 1Try to make the graph into a forest first. Hint 2(𝑑𝑒𝑔𝑖≤1degi≤1 for every 𝑖i) ⟹⟹ (The graph is a forest). SolutionLet 𝑑𝑖di be the degree of vertex 𝑖i. First, we keep doing the following until it is impossible:  Choose a vertex 𝑢u with 𝑑𝑢≥2du≥2, then find any two vertices 𝑣,𝑤v,w adjacent to 𝑢u. Perform the operation on (𝑢,𝑣,𝑤)(u,v,w). Since each operation decreases the number of edges by at least 11, at most 𝑚m operations will be performed. After these operations, 𝑑𝑖≤1di≤1 holds for every 𝑖i. Thus, the resulting graph consists only of components with size ≤2≤2.If there are no edges, the graph is already cool, and we don't need to do any more operations.Otherwise, let's pick an arbitrary edge (𝑢,𝑣)(u,v) as the base of the final tree, and then merge everything else to it.For a component with size =1=1 (i.e. it is a single vertex 𝑤w), perform the operation on (𝑢,𝑣,𝑤)(u,v,w), and set (𝑢,𝑣)←(𝑢,𝑤)(u,v)←(u,w).For a component with size =2=2 (i.e. it is an edge connecting 𝑎a and 𝑏b), perform the operation on (𝑢,𝑎,𝑏)(u,a,b).It is clear that the graph is transformed into a tree now.The total number of operations won't exceed 𝑛+𝑚≤2⋅max(𝑛,𝑚)n+m≤2⋅max(n,m).In the author's solution, we used some data structures to maintain the edges, thus, the time complexity is (𝑛+𝑚log𝑚)O(n+mlog⁡m) per test case. Code (C++)#include <bits/stdc++.h>
using namespace std;
#ifdef DEBUG
#include "debug.hpp"
#else
#define debug(...) (void)0
#endif

using i64 = int64_t;
constexpr bool test = false;

int main() {
  cin.tie(nullptr)->sync_with_stdio(false);
  int t;
  cin >> t;
  for (int ti = 0; ti < t; ti += 1) {
    int n, m;
    cin >> n >> m;
    vector<set<int>> adj(n + 1);
    for (int i = 0, u, v; i < m; i += 1) {
      cin >> u >> v;
      adj[u].insert(v);
      adj[v].insert(u);
    }
    vector<tuple<int, int, int>> ans;
    for (int i = 1; i <= n; i += 1) {
      while (adj[i].size() >= 2) {
        int u = *adj[i].begin();
        adj[i].erase(adj[i].begin());
        int v = *adj[i].begin();
        adj[i].erase(adj[i].begin());
        adj[u].erase(i);
        adj[v].erase(i);
        ans.emplace_back(i, u, v);
        if (adj[u].contains(v)) {
          adj[u].erase(v);
          adj[v].erase(u);
        } else {
          adj[u].insert(v);
          adj[v].insert(u);
        }
      }
    }
    vector<int> s;
    vector<pair<int, int>> p;
    for (int i = 1; i <= n; i += 1) {
      if (adj[i].size() == 0) {
        s.push_back(i);
      } else if (*adj[i].begin() > i) {
        p.emplace_back(i, *adj[i].begin());
      }
    }
    if (not p.empty()) {
      auto [x, y] = p.back();
      p.pop_back();
      for (int u : s) {
        ans.emplace_back(x, y, u);
        tie(x, y) = pair(x, u);
      }
      for (auto [u, v] : p) {
        ans.emplace_back(y, u, v);
      }
    }
    println("{}", ans.size());
    for (auto [x, y, z] : ans) println("{} {} {}", x, y, z);
  }
} Rate the Problem Amazing problem: 

    


211



 Good problem: 

    


50



 Average problem: 

    


15



 Bad problem: 

    


29



 Didn't solve: 

    


24



 2029E - Common GeneratorAuthor: Error_Yuan, wyrqwqFirst Blood: ksun48 at 00:23:50 Hint 122 is powerful. Hint 2Consider primes. Hint 3How did you prove that 22 can generate every integer except odd primes? Can you generalize it? SolutionIn this problem, we do not take the integer 11 into consideration.Claim 1. 22 can generate every integer except odd primes.Proof. For a certain non-prime 𝑥x, let mind(𝑥)mind⁡(x) be the minimum divisor of 𝑥x. Then 𝑥−mind(𝑥)x−mind⁡(x) must be an even number, which is ≥2≥2. So 𝑥−mind(𝑥)x−mind⁡(x) can be generated by 22, and 𝑥x can be generated by 𝑥−mind(𝑥)x−mind⁡(x). Thus, 22 is a generator of 𝑥x.Claim 2. Primes can only be generated by themselves.According to the above two claims, we can first check if there exist primes in the array 𝑎a. If not, then 22 is a common generator. Otherwise, let the prime be 𝑝p, the only possible generator should be 𝑝p itself. So we only need to check whether 𝑝p is a generator of the rest integers.For an even integer 𝑥x, it is easy to see that, 𝑝p is a generator of 𝑥x if and only if 𝑥≥2⋅𝑝x≥2⋅p. Claim 3. For a prime 𝑝p and an odd integer 𝑥x, 𝑝p is a generator of 𝑥x if and only if 𝑥−mind(𝑥)≥2⋅𝑝x−mind⁡(x)≥2⋅p.Proof. First, 𝑥−mind(𝑥)x−mind⁡(x) is the largest integer other than 𝑥x itself that can generate 𝑥x. Moreover, only even numbers ≥2⋅𝑝≥2⋅p can be generated by 𝑝p (𝑥−mind(𝑥)x−mind⁡(x) is even). That ends the proof.Thus, we have found a good way to check if a certain number can be generated from 𝑝p. We can use the linear sieve to pre-calculate all the mind(𝑖)mind⁡(i)-s.Time complexity: (∑𝑛+𝑉)O(∑n+V), where 𝑉=max𝑎𝑖V=maxai.Some other solutions with worse time complexity can also pass, such as (𝑉log𝑉)O(Vlog⁡V) and (𝑡𝑉‾‾√)O(tV). Code (C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()
using namespace std;
using ll = long long;
using ull = unsigned long long;

const int _N = 4e5 + 5;

int vis[_N], pr[_N], cnt = 0;

void init(int n) {
	vis[1] = 1;
	for (int i = 2; i <= n; i++) {
		if (!vis[i]) {
			pr[++cnt] = i;
		}
		for (int j = 1; j <= cnt && i * pr[j] <= n; j++) {
			vis[i * pr[j]] = pr[j];
			if (i % pr[j] == 0) continue;
		}
	}
}

int T;

void solve() {
	int n; cin >> n;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++) cin >> a[i];
	int p = 0;
	for (int i = 1; i <= n; i++) {
		if (!vis[a[i]]) p = a[i];
	}
	if (!p) {
		cout << 2 << '\n';
		return;
	}
	for (int i = 1; i <= n; i++) {
		if (a[i] == p) continue;
		if (vis[a[i]] == 0) {
			cout << -1 << '\n';
			return;
		}
		if (a[i] & 1) {
			if (a[i] - vis[a[i]] < 2 * p) {
				cout << -1 << '\n';
				return;
			}
		} else {
			if (a[i] < 2 * p) {
				cout << -1 << '\n';
				return;
			}
		}
	}
	cout << p << '\n';
	return;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	init(400000);
	cin >> T;
	while (T--) {
		solve();
	}
} Rate the Problem Amazing problem: 

    


136



 Good problem: 

    


70



 Average problem: 

    


18



 Bad problem: 

    


22



 Didn't solve: 

    


16



 2029F - Palindrome EverywhereAuthor: sszcdjrFirst Blood: taeyeon_ss at 00:16:50 Hint 1If there are both consecutive 𝚁R-s and 𝙱B-s, does the condition hold for all (𝑖,𝑗)(i,j)? Why?  Hint 2Suppose that there are only consecutive 𝚁R-s, check the parity of the number of 𝚁R-s in each consecutive segment of 𝚁R-s. Hint 3If for each consecutive segment of 𝚁R-s, the parity of the number of 𝚁R-s is odd, does the condition hold for all (𝑖,𝑗)(i,j)? Why?  Hint 4If for at least two of the consecutive segments of 𝚁R-s, the parity of the number of 𝚁R-s is even, does the condition hold for all (𝑖,𝑗)(i,j)? Why?  Hint 5Is this the necessary and sufficient condition? Why? Hint 6Don't forget some trivial cases like 𝚁𝚁𝚁...𝚁𝙱RRR...RB and 𝚁𝚁𝚁...𝚁RRR...R. SolutionFor each 𝑘>𝑛k>n or 𝑘≤0k≤0, let 𝑐𝑘ck be 𝑐𝑘mod𝑛ckmodn.Lemma 1: If there are both consecutive 𝚁R-s and 𝙱B-s, the answer is NO.Proof 1: Suppose that 𝑐𝑖−1=𝑐𝑖=𝚁ci−1=ci=R and 𝑐𝑗−1=𝑐𝑗=𝙱cj−1=cj=B, it's obvious that there doesn't exist a palindrome route between 𝑖i and 𝑗j.Imagine there are two persons on vertex 𝑖i and 𝑗j. They want to meet each other (they are on the same vertex or adjacent vertex) and can only travel through an edge of the same color.Lemma 2: Suppose that there are only consecutive 𝚁R-s, if for each consecutive segment of 𝚁R-s, the parity of the number of 𝚁R-s is odd, the answer is NO.Proof 2: Suppose that 𝑐𝑖=𝑐𝑗=𝙱ci=cj=B, 𝑖≢𝑗(mod𝑛)i≢j(modn) and 𝑐𝑖+1=𝑐𝑖+2=⋯=𝑐𝑗−1=𝚁ci+1=ci+2=⋯=cj−1=R. The two persons on 𝑖i and 𝑗j have to "cross" 𝙱B simultaneously. As for each consecutive segment of 𝚁R-s, the parity of the number of 𝚁R-s is odd, they can only get to the same side of their current consecutive segment of 𝚁R-s. After "crossing" 𝙱B, they will still be on different consecutive segments of 𝚁R-s separated by exactly one 𝙱B and can only get to the same side. Thus, they will never meet.Lemma 3: Suppose that there are only consecutive 𝚁R-s, if, for at least two of the consecutive segments of 𝚁R-s, the parity of the number of 𝚁R-s is even, the answer is NO.Proof 3: Suppose that 𝑐𝑖=𝑐𝑗=𝙱ci=cj=B, 𝑖≢𝑗(mod𝑛)i≢j(modn) and vertex 𝑖i and 𝑗j are both in a consecutive segment of 𝚁R-s with even number of 𝚁R-s. Let the starting point of two persons be 𝑖i and 𝑗−1j−1 and they won't be able to "cross" and 𝙱B. Thus, they will never meet.The only case left is that there is exactly one consecutive segment of 𝚁R-s with an even number of 𝚁R-s.Lemma 4: Suppose that there are only consecutive 𝚁R-s, if, for exactly one of the consecutive segments of 𝚁R-s, the parity of the number of 𝚁R-s is even, the answer is YES.Proof 4: Let the starting point of the two persons be 𝑖,𝑗i,j. Consider the following cases:Case 1: If vertex 𝑖i and 𝑗j are in the same consecutive segment of 𝚁R-s, the two persons can meet each other by traveling through the 𝚁R-s between them.Case 2: If vertex 𝑖i and 𝑗j are in the different consecutive segment of 𝚁R-s and there are odd numbers of 𝚁R-s in both segments, the two person may cross 𝙱B-s in the way talked about in Proof 2. However, when one of them reaches a consecutive segment with an even number of 𝚁R-s, the only thing they can do is let the one in an even segment cross the whole segment and "cross" the next 𝙱B in the front, while letting the other one traveling back and forth and "cross" the 𝙱B he just "crossed". Thus, unlike the situation in Proof 2, we successfully changed the side they can both get to and thus they will be able to meet each other as they are traveling toward each other and there are only odd segments between them.Case 3: If vertex 𝑖i and 𝑗j are in the different consecutive segment of 𝚁R-s and there are an odd number of 𝚁R-s in exactly one of the segments, we can let both of them be in one side of there segments and change the situation to the one we've discussed about in Case 2 (when one of them reached a consecutive segment with even number of 𝚁R-s).As a result, the answer is YES if:  At least 𝑛−1n−1 of 𝑐1,𝑐2,…,𝑐𝑛c1,c2,…,cn are the same (Hint 6), or Suppose that there are only consecutive 𝚁R-s, there's exactly one of the consecutive segments of 𝚁R-s such that the parity of the number of 𝚁R-s is even. And we can judge them in (𝑛)O(n) time complexity. Code (C++)#include <bits/stdc++.h>
using namespace std;
void solve(){
	int n; cin>>n;
	string s; cin>>s;
	int visr=0,visb=0,ok=0; 
	for(int i=0;i<n;i++){
		if(s[i]==s[(i+1)%n]){
			if(s[i]=='R') visr=1;
			else visb=1;
			ok++;
		}
	}
	if(visr&visb){
		cout<<"NO\n";
		return ;
	}
	if(ok==n){
		cout<<"YES\n";
		return ;
	}
	if(visb) for(int i=0;i<n;i++) s[i]='R'+'B'-s[i];
	int st=0;
	for(int i=0;i<n;i++) if(s[i]=='B') st=(i+1)%n;
	vector<int> vc;
	int ntot=0,cnt=0;
	for(int i=0,j=st;i<n;i++,j=(j+1)%n){
		if(s[j]=='B') vc.push_back(ntot),cnt+=(ntot&1)^1,ntot=0;
		else ntot++;
	}
	if(vc.size()==1||cnt==1){
		cout<<"YES\n";
		return ;
	}
	cout<<"NO\n";
	return ;
}
signed main(){
	int t; cin>>t;
	while(t--) solve();
	return 0;
} Bonus 1Count the number of strings of length 𝑛n satisfying the condition. Bonus 2Solve the problem for 𝑐𝑖∈{𝙰,𝙱,…,𝚉}ci∈{A,B,…,Z}, and solve the counting version. Rate the Problem Amazing problem: 

    


29



 Good problem: 

    


41



 Average problem: 

    


11



 Bad problem: 

    


46



 Didn't solve: 

    


21



 2029G - Balanced ProblemAuthor: wyrqwq, Error_YuanFirst Blood: taeyeon_ss at 00:56:22This problem has two approaches. The first one is the authors' solution, and the second one was found during testing. Solution 1 (with hints)Hint 1The array 𝑎a is constructed with the operations. How can we use this property? Hint 2If we want to make all 𝑎𝑖=𝑥ai=x, what is the minimum value of 𝑥x? Use the property mentioned in Hint 1. Hint 3(For the subproblem in Hint 2), try to find an algorithm related to the positions of 𝙻/𝚁L/R-s directly. Hint 4(For the subproblem in Hint 2), the conclusion is that, the minimum 𝑥x equals # of 𝙻-s+# of 𝚁-s−# of adjacent 𝙻𝚁-s# of L-s+# of R-s−# of adjacent LR-s. Think why. Hint 5Go for DP. SolutionRead the hints first.Then, note that there are only (𝑉)O(V) useful positions: If (after the initial operations) 𝑎𝑖>𝑉ai>V or 𝑎𝑖=𝑎𝑖−1ai=ai−1, we can simply ignore 𝑎𝑖ai, or merge 𝑐𝑖ci into 𝑐𝑖−1ci−1.Now let 𝑑𝑝(𝑖,𝑠)dp(i,s) denote the answer when we consider the prefix of length 𝑖i, and we have "saved" 𝑠s pairs of 𝙻𝚁LR.Then, 𝑑𝑝(𝑖,𝑠)=max𝑗<𝑖𝑑𝑝(𝑗,𝑠−|cntL(𝑗,𝑖−1)−cntR(𝑗+1,𝑖)|)+𝑐𝑖dp(i,s)=maxj<idp(j,s−|cntL(j,i−1)−cntR(j+1,i)|)+ciWrite cntLcntL and cntRcntR as prefix sums: 𝑑𝑝(𝑖,𝑠)=max𝑗<𝑖𝑑𝑝(𝑗,𝑠−|preL(𝑖−1)−preR(𝑖)+preR(𝑗)−preL(𝑗−1)|)+𝑐𝑖dp(i,s)=maxj<idp(j,s−|preL(i−1)−preR(i)+preR(j)−preL(j−1)|)+ciDo casework on the sign of the things inside the absabs, and you can maintain both cases with 1D Fenwick trees.Thus, you solved the problem in (𝑉2log𝑉)O(V2log⁡V). Solution 2 (with hints)Hint 1Solve the problem for a single 𝑣v first. Hint 2Don't think too much, just go straight for a DP solution. Hint 3Does your time complexity in DP contain 𝑛n or 𝑚m? In fact, both 𝑛n and 𝑚m are useless. There are only (𝑉)O(V) useful positions. Hint 4Use some data structures to optimize your DP. Even (𝑣2log2𝑣)O(v2log2⁡v) is acceptable. Hint 5Here is the final step: take a look at your DP carefully. Can you change the definition of states a little, so that it can get the answer for each 1≤𝑣≤𝑉1≤v≤V? SolutionFirst, note that there are only (𝑉)O(V) useful positions: If (after the initial operations) 𝑎𝑖>𝑉ai>V or 𝑎𝑖=𝑎𝑖−1ai=ai−1, we can simply ignore 𝑎𝑖ai, or merge 𝑐𝑖ci into 𝑐𝑖−1ci−1.Now, let's solve the problem for a single 𝑣v.Denote 𝑑𝑝(𝑖,𝑗,𝑘)dp(i,j,k) as the maximum answer when considering the prefix of length 𝑖i, and there are 𝑗j prefix additions covering 𝑖i, 𝑘k suffix additions covering 𝑖i.Enumerate on 𝑖i, and it is easy to show that the state changes if and only if 𝑗+𝑘+𝑎𝑖=𝑣j+k+ai=v, and 𝑑𝑝(𝑖,𝑗,𝑘)=max𝑝≤𝑗,𝑞≥𝑘𝑑𝑝(𝑖−1,𝑝,𝑞)+𝑐𝑖dp(i,j,k)=maxp≤j,q≥kdp(i−1,p,q)+ciYou can use a 2D Fenwick tree to get the 2D prefix max. Thus, you solved the single 𝑣v case in (𝑣2log2𝑣)O(v2log2⁡v).In fact, we can process the DP in (𝑣2log𝑣)O(v2log⁡v) by further optimization:  𝑑𝑝(𝑖,𝑗,𝑘)=max𝑝≤𝑖−1,𝑞≥𝑗,𝑣−𝑎𝑝−𝑞≤𝑘𝑑𝑝(𝑝,𝑞,𝑣−𝑎𝑝−𝑞)+𝑐𝑖dp(i,j,k)=maxp≤i−1,q≥j,v−ap−q≤kdp(p,q,v−ap−q)+ciThis only requires 𝑎𝑝+𝑞≥𝑎𝑖+𝑗ap+q≥ai+j when 𝑎𝑝≤𝑎𝑖ap≤ai, and 𝑞≤𝑗q≤j when 𝑎𝑝≥𝑎𝑖ap≥ai. So you can use 1D Fenwick trees to process the dp in (𝑣2log𝑣)O(v2log⁡v).Now, let's go for the whole solution.Let's modify the DP state a bit: now 𝑑𝑝(𝑖,𝑗,𝑘)dp(i,j,k) is the state when using 𝑣−𝑘v−k suffix operations (note that 𝑣v is not a constant here). The transformation is similar.Then the answer for 𝑣=𝑖v=i will be max𝑑𝑝(∗,∗,𝑖)maxdp(∗,∗,i). Code (Solution 1, C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()
using namespace std;
using ll = long long;
using ull = unsigned long long;
using ld = double;

const int _N = 4105;
const ld inf = 1e15;

int T;

struct fenwick {
	ll c[_N]; int N;
	int lowbit(int x) { return x & (-x); }
	void init(int n) {
		N = n;
		for (int i = 1; i <= N; i++) c[i] = -1e18;
	}
	void update(int x, ll v) {
		// assert(x != 0);
		while (x < N) {
			c[x] = max(c[x], v);
			x += lowbit(x);
		}
	}
	ll getmx(int x) {
		// assert(x != 0);
		ll res = -1e18;
		while (x > 0) {
			res = max(res, c[x]);
			x -= lowbit(x);
		}
		return res;
	}
} pre[4105], suf[4105];

void solve() {
	int n, o, m, k; cin >> n >> o >> m;
	k = 0;
	vector<ll> a(n + 3), c(n + 3), d(n + 3), L(n + 3), R(n + 3), L2(n + 3), R2(n + 3);
	for (int i = 1; i <= n; i++) cin >> c[i];
	for (int i = 1; i <= o; i++) {
		char op; int x; cin >> op >> x;
		if (op == 'L') L[x]++;
		else R[x]++;
	}
	vector<int> tL(n + 3), tR(n + 3);
	for (int i = 1; i <= n; i++) tR[i] = tR[i - 1] + R[i];
	for (int i = n; i >= 1; i--) tL[i] = tL[i + 1] + L[i];
	int q = 0, curL = 0, curR = 0;
	for (int i = 1; i <= n; i++) {
		a[i] = tL[i] + tR[i];
		if (a[i] <= m + k) {
		    if (a[i] == a[i - 1] && L[i] == 0 && R[i] == 0) {
		        if (q == 0) q++;
		        d[q] += c[i];
		        continue;
		    }
			q++;
			L2[q] += L[i];
			R2[q] += R[i] + curR;
			L2[q - 1] += curL;
			d[q] += c[i];
			curL = curR = 0;
		} else {
			curL += L[i];
			curR += R[i];
		}
	}
	L2[0] = 0; L2[q] += curL;
	for (int i = 1; i <= q; i++) L2[i] += L2[i - 1], R2[i] += R2[i - 1];
    m += k;
    vector<ll> dp(2 * m + 2, -1e18);
	for (int i = 0; i <= 2 * m; i++) {
		pre[i].init(2 * m + 2);
		suf[i].init(2 * m + 2);
	}
	vector<ll> ans(m + 1);
	for (int i = 1; i <= q; i++) {
        dp.resize(2 * m + 2, -1e18);
		dp[L2[i - 1]] = d[i];
		for (int s = 0; s <= m; s++) {
			ll res1 = pre[s - L2[i - 1] + m].getmx(R2[i] - L2[i - 1] + m + 1);
			ll res2 = suf[s - R2[i] + m].getmx(m + 1 - R2[i] + L2[i - 1]);
			dp[s] = max({ dp[s], res1 + d[i], res2 + d[i] });
			if (L2[q] + R2[i] - s >= 0 && L2[q] + R2[i] - s <= m) ans[L2[q] + R2[i] - s] = max(ans[L2[q] + R2[i] - s], dp[s]);
		}
		for (int s = 0; s <= m; s++) {
			if (dp[s] <= -1e12) continue;
			pre[s - L2[i - 1] + m].update(R2[i] - L2[i - 1] + m + 1, dp[s]);
			suf[s - R2[i] + m].update(m + 1 - R2[i] + L2[i - 1], dp[s]);
		}
	}
	for (int i = 1; i <= m; i++) {
		ans[i] = max(ans[i - 1], ans[i]);
		cout << ans[i] << " \n"[i == m];
	}
	return;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> T;
	while (T--) {
		solve();
	}
} Code (Solution 2, C++)#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define pb push_back
#define pii pair<int, int>
#define all(a) a.begin(), a.end()
const int mod = 1e9 + 7, N = 5005;

void solve() {
    int n, m, V;
    cin >> n >> m >> V;
    vector <int> c(n);
    for (int i = 0; i < n; ++i) {
        cin >> c[i];
    }
    vector <int> pre(n + 1);
    for (int i = 0; i < m; ++i) {
        char x; int v; cin >> x >> v, --v;
        if (x == 'L') {
            pre[0]++, pre[v + 1]--;
        } else {
            pre[v]++;
        }
    }
    for (int i = 0; i < n; ++i) {
        pre[i + 1] += pre[i];
    }
    vector <pair <ll, int>> vec;
    for (int i = 0, j = 0; i < n; i = j) {
        ll tot = 0;
        while (j < n && pre[i] == pre[j]) {
            tot += c[j], j++;
        }
        if (pre[i] <= V) {
            vec.emplace_back(tot, pre[i]);
        }
    }

    vector bit(V + 5, vector <ll>(V + 5, -1ll << 60));
    auto upd = [&](int x, int y, ll v) {
        for (int i = x + 1; i < V + 5; i += i & (-i)) {
            for (int j = y + 1; j < V + 5; j += j & (-j)) {
                bit[i][j] = max(bit[i][j], v);
            }
        }
    };
    auto query = [&](int x, int y) {
        ll ans = -1ll << 60;
        for (int i = x + 1; i > 0; i -= i & (-i)) {
            for (int j = y + 1; j > 0; j -= j & (-j)) {
                ans = max(ans, bit[i][j]);
            }
        }
        return ans;
    };

    upd(0, 0, 0);
    vector <ll> tmp(V + 1);
    for (auto [val, diff] : vec) {
        for (int i = 0; i + diff <= V; ++i) {
            tmp[i] = query(i, i + diff);
        }
        for (int i = 0; i + diff <= V; ++i) {
            upd(i, i + diff, tmp[i] + val);
        }
    }

    for (int i = 1; i <= V; ++i) {
        cout << query(i, i) << " \n"[i == V];
    }
}

int main() {
    ios::sync_with_stdio(false), cin.tie(0);
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
} Rate the Problem Amazing problem: 

    


19



 Good problem: 

    


8



 Average problem: 

    


3



 Bad problem: 

    


2



 Didn't solve: 

    


22



  BonusSolve the problem in (𝑉2)O(V2).2029H - Message SpreadAuthor: sszcdjrFirst Blood: Benq at 02:04:40 (though unintended brute force), jiangly at 02:55:12 (intended, orz!) Hint 1It's hard to calculate the expected number. Try to change it to the probability. Hint 2Consider a (3𝑛)O(3n) dp first. Hint 3Use inclusion and exclusion. Hint 4Write out the transformation. Try to optimize it. SolutionLet 𝑑𝑝𝑆dpS be the probability such that exactly the points in 𝑆S have the message.The answer is ∑𝑑𝑝𝑆⋅𝑡𝑟𝑆∑dpS⋅trS, where 𝑡𝑟𝑆trS is the expected number of days before at least one vertex out of 𝑆S to have the message (counting from the day that exactly the points in 𝑆S have the message).For transformation, enumerate 𝑆,𝑇S,T such that 𝑆∩𝑇=∅S∩T=∅. Transfer 𝑑𝑝𝑆dpS to 𝑑𝑝𝑆∪𝑇dpS∪T. It's easy to precalculate the coefficient, and the time complexity differs from (3𝑛)O(3n), (𝑛⋅3𝑛)O(n⋅3n) to (𝑛2⋅3𝑛)O(n2⋅3n), according to the implementation.The transformation is hard to optimize. Enumerate 𝑇T and calculate the probability such that vertices in 𝑆S is only connected with vertices in 𝑇T, which means that the real status 𝑅R satisfies 𝑆⊆𝑅⊆(𝑆∪𝑇)S⊆R⊆(S∪T). Use inclusion and exclusion to calculate the real probability.List out the coefficient: ∏𝑒∈{1,2,3,…,𝑛}(1−𝑤𝑒)⋅∏𝑒∈(𝑆∪𝑇)11−𝑤𝑒⋅∏𝑒∈{1,2,…,𝑛}∖𝑆11−𝑤𝑒⋅∏𝑒∈𝑇(1−𝑤𝑒)1−∏𝑒∈{1,2,3,…,𝑛}(1−𝑤𝑒)⋅∏𝑒∈𝑆11−𝑤𝑒⋅∏𝑒∈{1,2,3,…,𝑛}∖𝑆11−𝑤𝑒∏e∈{1,2,3,…,n}(1−we)⋅∏e∈(S∪T)11−we⋅∏e∈{1,2,…,n}∖S11−we⋅∏e∈T(1−we)1−∏e∈{1,2,3,…,n}(1−we)⋅∏e∈S11−we⋅∏e∈{1,2,3,…,n}∖S11−we(Note that 𝑤𝑒we denotes the probability of the appearance of the edge 𝑒e)We can express it as Const⋅𝑓𝑆∪𝑇⋅𝑔𝑆⋅ℎ𝑇Const⋅fS∪T⋅gS⋅hT. Use a subset convolution to optimize it. The total time complexity is (2𝑛⋅𝑛2)O(2n⋅n2).It's easy to see that all 𝑑𝑝𝑆≠0dpS≠0 satisfies 1∈𝑆1∈S, so the time complexity can be (2𝑛−1⋅𝑛2)O(2n−1⋅n2) if well implemented. Code (C++)#include <bits/stdc++.h>
#define int long long 
using namespace std;
const int N=(1<<21),mod=998244353;
const int Lim=8e18;
inline void add(signed &i,int j){
	i+=j;
	if(i>=mod) i-=mod;
}
int qp(int a,int b){
	int ans=1;
	while(b){
		if(b&1) (ans*=a)%=mod;
		(a*=a)%=mod;
		b>>=1;
	}
	return ans;
}
int dp[N],f[N],g[N],h[N];
int s1[N],s2[N];
signed pre[22][N/2],t[22][N/2],pdp[N][22];
int p[N],q[N],totp,totq;
signed main(){
	int n,m; cin>>n>>m;
	int totprod=1;
	for(int i=0;i<(1<<n);i++) s1[i]=s2[i]=1;
	for(int i=1;i<=m;i++){
		int u,v,p,q; cin>>u>>v>>p>>q;
		int w=p*qp(q,mod-2)%mod;
		(s1[(1<<(u-1))+(1<<(v-1))]*=(mod+1-w))%=mod;
		(s2[(1<<(u-1))+(1<<(v-1))]*=qp(mod+1-w,mod-2))%=mod;
		(totprod*=(mod+1-w))%=mod;
	}
	for(int j=1;j<=n;j++) for(int i=0;i<(1<<n);i++) if((i>>(j-1))&1) (s1[i]*=s1[i^(1<<(j-1))])%=mod,(s2[i]*=s2[i^(1<<(j-1))])%=mod;
	for(int i=0;i<(1<<n);i++) f[i]=s2[i],g[i]=totprod*s2[((1<<n)-1)^i]%mod*qp(mod+1-totprod*s2[i]%mod*s2[((1<<n)-1)^i]%mod,mod-2)%mod,h[i]=s1[i];
	for(int i=1;i<(1<<n);i++) pre[__builtin_popcount(i)][i>>1]=h[i];
	dp[1]=1;
	for(int j=1;j<=n;j++){
		if(!((1>>(j-1))&1)) add(pdp[1|(1<<(j-1))][j],mod-(dp[1]*g[1]%mod*f[1]%mod));
	}
	t[0][0]=dp[1]*g[1]%mod;
	for(int k=1;k<=n;k++) for(int j=1;j<n;j++) for(int i=0;i<(1<<(n-1));i++) if((i>>(j-1))&1) add(pre[k][i],pre[k][i^(1<<(j-1))]);
	for(int j=1;j<n;j++) for(int i=0;i<(1<<(n-1));i++) if((i>>(j-1))&1) add(t[0][i],t[0][i^(1<<(j-1))]);
	for(int k=1;k<n;k++){
		totp=totq=0;
		for(int i=0;i<(1<<(n-1));i++) if(__builtin_popcount(i)<=k) p[++totp]=i; else q[++totq]=i;
		for(int l=1,i=p[l];l<=totp;l++,i=p[l]) for(int j=0;j<k;j++) add(t[k][i],1ll*t[j][i]*pre[k-j][i]%mod);
		for(int i=0;i<(1<<(n-1));i++) t[k][i]%=mod;
		for(int j=1;j<n;j++) for(int l=1,i=p[l];l<=totp;l++,i=p[l]) if((i>>(j-1))&1) add(t[k][i],mod-t[k][i^(1<<(j-1))]);
		for(int i=0;i<(1<<(n-1));i++){
			if(__builtin_popcount(i)==k){
				add(pdp[(i<<1)|1][0],t[k][i]*f[(i<<1)|1]%mod);
				int pre=0;
				for(int j=1;j<=n;j++){
					(pre+=pdp[(i<<1)|1][j-1])%=mod;
					if(!((((i<<1)|1)>>(j-1))&1)) add(pdp[(i<<1)|1|(1<<(j-1))][j],mod-pre);
				}
				(pre+=pdp[(i<<1)|1][n])%=mod;
				dp[(i<<1)|1]=pre;
				for(int j=1;j<=n;j++){
					if(!((((i<<1)|1)>>(j-1))&1)) add(pdp[(i<<1)|1|(1<<(j-1))][j],mod-(dp[(i<<1)|1]*g[(i<<1)|1]%mod*f[(i<<1)|1]%mod));
				}
				t[k][i]=pre*g[(i<<1)|1]%mod;
			}
			else t[k][i]=0;
		}
		for(int j=1;j<n;j++) for(int l=1,i=q[l];l<=totq;l++,i=q[l]) if((i>>(j-1))&1) add(t[k][i],t[k][i^(1<<(j-1))]);
	}
	int ans=0;
	for(int i=1;i<(1<<n)-1;i+=2) (ans+=dp[i]*qp(mod+1-totprod*s2[i]%mod*s2[((1<<n)-1)^i]%mod,mod-2)%mod)%=mod;
	cout<<ans;
	return 0;
} Rate the Problem Amazing problem: 

    


10



 Good problem: 

    


3



 Average problem: 

    


1



 Bad problem: 

    


3



 Didn't solve: 

    


19



 2029I - Variance ChallengeAuthor: Error_YuanFirst Blood: rainboy at 01:33:40 (intended, the only solve in contest, orz!) Hint 1The intended solution has nothing to do with dynamic programming. Hint 2This is the key observation of the problem. Suppose we have an array 𝑏b and a function 𝑓(𝑥)=∑(𝑏𝑖−𝑥)2f(x)=∑(bi−x)2, then the minimum value of 𝑓(𝑥)f(x) is the variance of 𝑏b. Hint 3Using the observation mentioned in Hint 2, we can reduce the problem to minimizing ∑(𝑎𝑖−𝑥)2∑(ai−x)2 for a given 𝑥x. There are only (𝑛⋅𝑚)O(n⋅m) possible 𝑥x-s. Hint 4The rest of the problem is somehow easy. Try flows, or just find a greedy algorithm! Hint 5If you are trying flows: the quadratic function is always convex.  SolutionKey Observation. Suppose we have an array 𝑏b and a function 𝑓(𝑥)=∑(𝑏𝑖−𝑥)2f(x)=∑(bi−x)2, then the minimum value of 𝑓(𝑥)f(x) is the variance of 𝑏b.Proof. This is a quadratic function of 𝑥x, and the its symmetry axis is 𝑥=1𝑛∑𝑏𝑖x=1n∑bi. So the minimum value is 𝑓(1𝑛∑𝑏𝑖)f(1n∑bi). That is exactly the definition of variance.Thus, we can enumerate all possible 𝑥x-s, and find the minimum ∑(𝑎𝑖−𝑥)2∑(ai−x)2 after the operations, then take the minimum across them. That will give the correct answer to the original problem. Note that there are only (𝑛⋅𝑚)O(n⋅m) possible 𝑥x-s.More formally, let 𝑘𝑥,𝑐kx,c be the minimum value of ∑(𝑎𝑖−𝑥)2∑(ai−x)2 after exactly 𝑐c operations. Then ans𝑖=minany possible 𝑥𝑘𝑥,𝑖ansi=minany possible xkx,i.So we only need to solve the following (reduced) problem:  Given a (maybe non-integer) number 𝑥x. For each 1≤𝑖≤𝑚1≤i≤m, find the minimum value of ∑(𝑎𝑖−𝑥)2∑(ai−x)2 after exactly 𝑖i operations. To solve this, we can use the MCMF model:  Set a source node 𝑠s and a target node 𝑡t. For each 1≤𝑖≤𝑛1≤i≤n, add an edge from 𝑠s to 𝑖i with cost 00. For each 1≤𝑖≤𝑛1≤i≤n, add an edge from 𝑖i to 𝑡t with cost 00. For each 1≤𝑖<𝑛1≤i<n, add an edge from 𝑖i to 𝑖+1i+1 with cost being a function cost(𝑓)=(𝑎𝑖+𝑓−𝑥)2−(𝑎𝑖−𝑥)2cost(f)=(ai+f−x)2−(ai−x)2, where 𝑓f is the flow on this edge. Note that the costcost function is convex, so this model is correct, as you can split an edge into some edges with cost of cost(1)cost(1), cost(2)−cost(1)cost(2)−cost(1), cost(3)−cost(2)cost(3)−cost(2), and so on. Take a look at the model again. We don't need to run MCMF. We can see that it is just a process of regret greedy. So you only need to find the LIS (Largest Interval Sum :) ) for each operation.Thus, we solved the reduced problem in (n⋅m)O(n⋅m).Overall time complexity: ((𝑛⋅𝑚)2)O((n⋅m)2) per test case.Reminder: don't forget to use __int128 if you didn't handle the numbers carefully! Code (C++)#include <bits/stdc++.h>
#define all(s) s.begin(), s.end()
using namespace std;
using ll = long long;
using ull = unsigned long long;

const int _N = 1e5 + 5;

int T;

void solve() {
	ll n, m, k; cin >> n >> m >> k;
	vector<ll> a(n + 1);
	for (int i = 1; i <= n; i++) cin >> a[i];
	vector<ll> kans(m + 1, LLONG_MAX);
	vector<__int128> f(n + 1), g(n + 1), v(n + 1);
	vector<int> vis(n + 1), L(n + 1), L2(n + 1);
	ll sum = 0;
	for (int i = 1; i <= n; i++) sum += a[i];
	__int128 pans = 0;
	for (int i = 1; i <= n; i++) pans += n * a[i] * a[i];
	auto work = [&](ll s) {
		__int128 ans = pans;
		ans += s * s - 2ll * sum * s;
		f.assign(n + 1, LLONG_MAX);
		g.assign(n + 1, LLONG_MAX);
		for (int i = 1; i <= n; i++) {
			v[i] = n * (2 * a[i] * k + k * k) - 2ll * s * k;
			vis[i] = 0;
		}
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				L[j] = L2[j] = j;
				if (f[j - 1] < 0) f[j] = f[j - 1] + v[j], L[j] = L[j - 1];
				else f[j] = v[j];
				if (!vis[j]) {
					g[j] = LLONG_MAX;
					continue;
				}
				if (g[j - 1] < 0) g[j] = g[j - 1] + 2ll * n * k * k - v[j], L2[j] = L2[j - 1];
				else g[j] = 2ll * n * k * k - v[j];
			}
			__int128 min_sum = LLONG_MAX;
			int l = 1, r = n, type = 0;
			for (int j = 1; j <= n; j++) {
				if (f[j] < min_sum) {
					min_sum = f[j], r = j, l = L[j];
				}
			}
			for (int j = 1; j <= n; j++) {
				if (g[j] < min_sum) {
					min_sum = g[j], r = j, l = L2[j];
					type = 1;
				}
			}
			ans += min_sum;
			if (type == 0) {
				for (int j = l; j <= r; j++) vis[j]++, v[j] += 2 * n * k * k;
			} else {
				for (int j = l; j <= r; j++) vis[j]--, v[j] -= 2 * n * k * k;
			}
			kans[i] = min((__int128)kans[i], ans);
		}
	};
	
	for (ll x = sum; x <= sum + n * m * k; x += k) {
		work(x);
	}
	for (int i = 1; i <= m; i++) cout << kans[i] << " \n"[i == m];
	return;
}

int main() {
	ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
	cin >> T;
	while (T--) {
		solve();
	}
} Rate the Problem Amazing problem: 

    


11



 Good problem: 

    


2



 Average problem: 

    


0



 Bad problem: 

    


2



 Didn't solve: 

    


44