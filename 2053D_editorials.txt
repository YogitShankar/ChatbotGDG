 Problem_ID: 2053D
The problem makes no difference when both a and b can be rearranged. Let the rearranged arrays of a and b be c and d respectively. If q=0 , we can write c as SORTED( a 1 , a 2 …, a n ) and d as SORTED( b 1 , b 2 …, b n ) . It can be proved that this reaches the maximum value: if not so, then There must be some pair (i,j) such that c i < c j , d i > d j . Since min( c i , d i )⋅min( c j , d j )= c i ⋅min( c j , d j )≤ c i ⋅min( c j , d i )=min( c i , d j )⋅min( c j , d i ) , we can swap d i and d j , and the product does not decrease. Consider the modification, which is a single element increment by 1 . Without loss of generality, let c x be increased by 1 (and the processing method for d is the same). If c x < c x+1 , then after the modification c x ≤ c x+1 , which would be fine. Otherwise, we can modify the array c in the form of a single round of "Insertion Sort": We continuously swap c x and c x+1 , x←x+1 , until c x < c x+1 (or x=n ), and thus the array remains sorted after the increment. In fact, the swap operation does nothing in the above process: in these cases, c x = c x+1 holds! So we can just set x ′ as the maximum k such that c k = c x , and then increase c x ′ by 1 , after which c is still sorted. The k can be found with a naive binary search, so the problem is solved in O(nlogn+q(logp+logn)) per test case.