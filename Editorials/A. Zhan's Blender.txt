IdeaIn each second, we will blend min(x,c)min(x,c) fruits. So time taken is ⌈nmin(x,c)⌉⌈nmin(x,c)⌉

Hint 1nn is the winner. n−1n−1 will lose only against nn.

Hint 2For others, if we make them first against n−1n−1 and atlast we have n−1n−1 and nn fight, their score will be added.

Hint 3So the final answer will be A1+A2+....+An−2+An−An−2A1+A2+....+An−2+An−An−2

Hint 1Let's say we know some string ss is a substring of tt.How can we extend it to find char just after this?

Hint 2The idea is to query for s0s0 and s1s1; if one of them returns true, add that char to s and continue again.

Hint 3If both s0s0 and s1s1 return false, then we know that our current string is the suffix of tt. Now query for 0s0s and 1s1s. and keep adding it in front.

Hint 3In the worst case, this make take 2n+22n+2 queries. To avoid this, if 0s0s returns true, add 00 in front. Otherwise, we know 1s1s will return true, so directly add it without asking.

Hint 1What is the minimum possible value of the whole array?

Hint 2One of the value must be less than or equal to the average of the array.

Hint 3Now, notice that we only do -ve operations on the first element.What is the minimum possible value of a2....,an?(Again, think an average of a2....,an) 

Hint 4Similarly for every i, we will reduce (a1,a2,....ai-1) can only increase values in (ai,ai+1,.....,an).So, what is the minimum value in this part?(Again think average of ai,....,an)

Hint 5Now, if we take the minimum of all of the above values, we know for sure that the final minimum is less than or equal to the above value.As it turns out always possible to create an array such that above value will be the minimum possible.

Hint 6Do similar stuff for maximum value and print their difference.

Hint 1What is the minimum value we can have first value? Take minimum.

Hint 2Now, for the second element, find the element such that gcd(p1,ai) is the minimum possible.

Hint 3In general, it greedily finds the next value such that gcd reduces as much as it can.

Hint 4Well. Why does this greedy works? Proof by AC  Smash me

Hint 1Let's pick this graph, and say we want to find the answer when Bob starts at node 8. 

Hint 2The game will proceed as follows: both Alice and Bob will move towards each other on the path between 1 and 8.At some point, one of them will leave this path, allowing another person to take all remaining nodes if they want.

Hint 3We don't really need a complete tree, just the distances of how long someone can go if they leave this path. The depth array (d1,d2,...,dkd1,d2,...,dk) becomes [0,2,1,4,1,2,1,4][0,2,1,4,1,2,1,4]Now, if Alice leaves at node 2, then they will travel a total of 4 nodes. We can

Hint 4Now, if Alice leaves at node 2, then they will travel a total of 4 nodes.Formally, if Alice leaves at ith node on this path, the distance she will travel is i+dii+di These will be distances for the example above. [1,4,4,8,6,8,8,12][1,4,4,8,6,8,8,12]If Bob leaves at ith node on this path, the distance he will travel is k−i+1+dik−i+1+di These will be distances for the example above. [8,9,7,9,5,5,3,5][8,9,7,9,5,5,3,5]

Hint 5Now, we can brute force game theory problem. FindWinner(aliceIdx,bobIdx,Turn) denotes who will be the winner if Alice is at aliceIdx on path, Bob is at bobIdx on path, and turn is (Alice/Bob) based on who is going to play.

Hint 6At each turn player can see who will be the winner if they leave the path, and if they do not, and make a rational decision based on it.

Hint 7Roughly, the following is the pseudo code - // returns true if Alice wins, and false if Bob wins.
bool FindWinner(const lli aidx,const lli bidx,const bool isAliceTurn){
    if(isAliceTurn){
        // if Alice continues on the path.
        if(aidx+1<bidx&&FindWinner(aidx+1,bidx,!isAliceTurn))
            return true;
        // if Alice leave at current node.
        // You can use segment tree for this range max query.
        if(aliceDist[aidx]>max(bobDist[aidx+1:bidx]))
            return true;
        return false;
    }

    // if Bob continues on the path
    if(aidx+1<bidx&&!FindWinner(aidx,bidx-1,!isAliceTurn))
        return false;
    // if Bob leave at current index.
    // You can use segment tree for this range max query.
    if(bobDist[aidx]>=max(aliceDist[aidx:bidx-1]))
        return false;
    return true;
});

SolutionMy rating doesn’t allow me to understand it.

