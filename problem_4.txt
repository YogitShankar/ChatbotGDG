Title: D. Digital string maximization

Statement:
You are given a string
s
, consisting of digits from
0
to
9
. In one operation, you can pick any digit in this string, except for
0
or the leftmost digit, decrease it by
1
, and then swap it with the digit left to the picked.
For example, in one operation from the string
1023
, you can get
1103
or
1022
.
Find the lexicographically maximum string you can obtain after any number of operations.
The first line of the input consists of an integer
t
(
1≤t≤
10
4
)  — the number of test cases.
Each test case consists of a single line consisting of a digital string
s
(
1≤|s|≤2⋅
10
5
), where
|s|
denotes the length of
s
. The string does not contain leading zeroes.
It is guaranteed that the sum of
|s|
of all test cases doesn't exceed
2⋅
10
5
.
For each test case, print the answer on a separate line.
In the first example, the following sequence of operations is suitable:
19→81
.
In the second example, the following sequence of operations is suitable:
1709→1780→6180→6710
.
In the fourth example, the following sequence of operations is suitable:
51476→53176→53616→53651→55351→55431
.

Input Specification:
Input
The first line of the input consists of an integer
t
(
1≤t≤
10
4
)  — the number of test cases.
Each test case consists of a single line consisting of a digital string
s
(
1≤|s|≤2⋅
10
5
), where
|s|
denotes the length of
s
. The string does not contain leading zeroes.
It is guaranteed that the sum of
|s|
of all test cases doesn't exceed
2⋅
10
5
.

Output Specification:
Output
For each test case, print the answer on a separate line.

Sample Tests:
Example
input
Copy
6
19
1709
11555
51476
9876543210
5891917899
output
Copy
81
6710
33311
55431
9876543210
7875567711

Constraints:
Time: time limit per test2 seconds
Memory: memory limit per test256 megabytes

Tags: brute force, greedy, math, strings, *1300

Editorial:

