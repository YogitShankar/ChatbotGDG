Title: B. Find the Permutation
Statement:

You are given an undirected graph with 
n
 vertices, labeled from 
1
 to 
n
. This graph encodes a hidden permutation
∗
p
of size
n
. The graph is constructed as follows:
Your task is to reconstruct and output the permutation
p
. It can be proven that permutation
p
can be uniquely determined.
∗
A permutation of length
n
is an array consisting of
n
distinct integers from
1
to
n
in arbitrary order. For example,
[2,3,1,5,4]
is a permutation, but
[1,2,2]
is not a permutation (
2
appears twice in the array), and
[1,3,4]
is also not a permutation (
n=3
but there is
4
in the array).
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤500
). The description of the test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤1000
).
The
i
-th of the next
n
lines contains a string of
n
characters
gi,1gi,2…gi,n
(
gi,j=0
or
gi,j=1
) — the adjacency matrix.
gi,j=1
if and only if there is an edge between vertex
i
and vertex
j
.
It is guaranteed that there exists a permutation
p
which generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning
gi,j=gj,i
and
gi,i=0
.
It is guaranteed that the sum of
n
over all test cases does not exceed
1000
.
For each test case, output
n
integers
p1,p2,…,pn
representing the reconstructed permutation.
In the first case
p=[1]
. Since there are no pairs
1≤i<j≤n
, there are no edges in the graph.
The graph in the second case is shown below. For example, when we choose
i=3
and
j=4
, we add an edge between vertices
pi=1
and
pj=3
, because
pi<pj
. However, when we choose
i=2
and
j=3
,
pi=2
and
pj=1
, so
pi<pj
doesn't hold. Therefore, we don't add an edge between
2
and
1
.

In the third case, there are no edges in the graph, so there are no pairs of integers
1≤i<j≤n
such that
pi<pj
. Therefore,
p=[6,5,4,3,2,1]
.
Input Specification:
Input
Each test contains multiple test cases. The first line contains the number of test cases
t
(
1≤t≤500
). The description of the test cases follows.
The first line of each test case contains a single integer
n
(
1≤n≤1000
).
The
i
-th of the next
n
lines contains a string of
n
characters
gi,1gi,2…gi,n
(
gi,j=0
or
gi,j=1
) — the adjacency matrix.
gi,j=1
if and only if there is an edge between vertex
i
and vertex
j
.
It is guaranteed that there exists a permutation
p
which generates the given graph. It is also guaranteed that the graph is undirected and has no self-loops, meaning
gi,j=gj,i
and
gi,i=0
.
It is guaranteed that the sum of
n
over all test cases does not exceed
1000
.
Output Specification:
Output
For each test case, output
n
integers
p1,p2,…,pn
representing the reconstructed permutation.
Sample Tests:
Example
input
Copy
3
1
0
5
00101
00101
11001
00001
11110
6
000000
000000
000000
000000
000000
000000
output
Copy
1 
4 2 1 3 5 
6 5 4 3 2 1 
Constraints: time limit per test1.5 seconds memory limit per test256 megabytes
