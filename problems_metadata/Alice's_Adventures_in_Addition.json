{
    "time_limit": "3 seconds",
    "memory_limit": "32 megabytes",
    "tags": [
        "bitmasks",
        "brute force",
        "dp",
        "implementation",
        "*2700"
    ],
    "solution": "2028F - Alice's Adventures in AdditionLetdp[i][j]dp[i][j]be whethera1\u2218a2\u2218\u2026\u2218ai=ja1\u2218a2\u2218\u2026\u2218ai=jcan be satisfied. Then, let's case onaiai.Ifai=0ai=0, thendp[i][j]=dp[i\u22121][j]\u2228dp[i\u22122][j]\u2228\u22ef\u2228dp[0][j]dp[i][j]=dp[i\u22121][j]\u2228dp[i\u22122][j]\u2228\u22ef\u2228dp[0][j](where we will takedp[0][j]=1[j=0]dp[0][j]=1[j=0], the indicator thatj=0j=0). This is because we can multiply together any suffix to form00. We can do this in timeO(1)O(1)by keeping these prefix ORs.Ifai=1ai=1, thendp[i][j]=dp[i\u22121][j]\u2228dp[i\u22121][j\u22121]dp[i][j]=dp[i\u22121][j]\u2228dp[i\u22121][j\u22121](sincem\u22651m\u22651we don't have to worry about accidentally allowing00s). This is because we can either multiplyai\u22121ai\u22121by11or add11.Otherwise, note that we can only multiply together at mostlog2(j)log2\u2061(j)manyai>1ai>1before the result exceedsjj. So, for eachiiletback(i)back(i)denote the biggestk<ik<isuch thatak\u22601ak\u22601. Then, we can writedp[i][j]=dp[i\u22121][j\u2212ai]\u2228dp[back(i)\u22121][j\u2212ai\u22c5aback(i)]\u2228\u22efdp[i][j]=dp[i\u22121][j\u2212ai]\u2228dp[back(i)\u22121][j\u2212ai\u22c5aback(i)]\u2228\u22efwhere we continue until we either reachi=0i=0, hit00, or exceedjj.There is one special case: ifak=0ak=0for anyk<ik<i, then we should also allowdp[i][j]|=dp[k\u22121][j]\u2228dp[k\u22122][j]\u2228\u22ef\u2228dp[0][j]dp[i][j]|=dp[k\u22121][j]\u2228dp[k\u22122][j]\u2228\u22ef\u2228dp[0][j]. We can keep track of the last timeak=0ak=0and use the same prefix OR idea as above.Note that all of these operations are \"batch\" operations: that is, we can do them for alljjsimultaneously for a givenii. Thus, this gives a bitset solution in timeO(nmlogmw)O(nmlog\u2061mw)and with space complexityO(nmw)O(nmw). However, this uses too much space.We can optimize the space complexity to only storelog2(m)+4log2\u2061(m)+4bitsets (with some extra integers) instead. To do this, note that for the00case we only require one bitset which we can update after eachii, for the11case we only have to keep the previous bitset, and for the>1>1case we only need to store the most recentlog2(m)log2\u2061(m)bitsets for indicesiiwithai+1>1ai+1>1. We can keep this in a deque and pop from the back if the size exceedslog2(m)log2\u2061(m). For the special case at the end, we can keep track of a prefix bitset for the last occurrence of a00.Overall, this uses space complexityO(mlog2mw)O(mlog2\u2061mw)which is sufficient (interestingly, we don't even have to store the input!)"
}