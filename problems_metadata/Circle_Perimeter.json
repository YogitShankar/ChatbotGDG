{
    "time_limit": "1 second",
    "memory_limit": "256 megabytes",
    "tags": [
        "binary search",
        "brute force",
        "dfs and similar",
        "geometry",
        "implementation",
        "math",
        "*1600"
    ],
    "solution": [
        "There are many solutions to this problem, some of which involve binary search, but we will present a solution that doesn't use it. In fact, our solution is basically just brute force, but with some small observations that make it pass. See the implementation for more detail.",
        "First, we can only count points (x,y)(x,y) such that x\u22650x\u22650 and y>0y>0; we can multiply by 44 at the end to get points in all four quadrants, by symmetry.",
        "Let's store a variable heightheight initially equal to rr. It will tell us the maximum yy-value to look at.",
        "Iterate through all values of xx from 00 to rr. For each xx, decrease heightheight until the distance of (x,height)(x,height) to the origin is <r+1<r+1. Then, brute force all values of yy from heightheight downwards until we hit a point whose distance to the origin is <r<r; at this point, we break and add the number of valid points to our total.",
        "Note that we essentially only look at points whose distance to the origin is between rr and r+1r+1; that is, we brute force over all valid points.",
        "How many valid points are there? Well, we can roughly estimate the number of points as the area of the region, which is \u03c0(r2\u2212(r\u22121)2)=2\u03c0r\u2212\u03c0\u03c0(r2\u2212(r\u22121)2)=2\u03c0r\u2212\u03c0. This means we only visit O(r)O(r) points per test case, which is fast enough."
    ]
}