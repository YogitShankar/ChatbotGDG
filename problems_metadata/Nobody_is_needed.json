{
    "time_limit": "6 seconds",
    "memory_limit": "512 megabytes",
    "tags": [
        "2-sat",
        "data structures",
        "dfs and similar",
        "dp",
        "*2500"
    ],
    "solution": [
        "Let's iterate the left boundary of our queries LL from nn to 11 and maintain the Fenwick tree FF, where FiFi = the number of sought sets of indices in which tk=itk=i, and t1\u2265Lt1\u2265L. Then the answer to the query with the left boundary at LL will be the sum over the interval [li;ri][li;ri] in our Fenwick tree. Now we just need to learn how to update our tree when transitioning from LL to L\u22121L\u22121. Some new sets of indices may have been added, starting at L\u22121L\u22121. Let's denote posiposi as the position of the number ii in the permutation. We'll create an auxiliary array dpdp. We'll learn to calculate the dynamics dpi=dpi= the number of sought sets of indices where t1=L\u22121t1=L\u22121, tk=itk=i. The base case will be dpL\u22121=1dpL\u22121=1. Suppose we know the value of dpposxdpposx. Then we can update dpposy=dpposy+dpposxdpposy=dpposy+dpposx, if yy is divisible by xx and y\u2260xy\u2260x, posai\u2264posx\u2264posyposai\u2264posx\u2264posy. We can calculate this dynamics straightforwardly, iterating over xx and yy (y(y is divisible by xx and xx is divisible by ai)ai). Notice that this will work in total for O(n\u22c5logn\u22c5logn)O(n\u22c5log\u2061n\u22c5log\u2061n) for the permutation. Now we can iterate over all numbers again that are multiples of aiai, update the Fenwick tree, and clear the dpdp array to reuse it in the future."
    ]
}