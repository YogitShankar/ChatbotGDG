{
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "combinatorics",
        "dfs and similar",
        "dp",
        "graphs",
        "greedy",
        "math",
        "probabilities",
        "trees",
        "*2100"
    ],
    "solution": "[problem:2040E]To begin with, let's solve it without queries and forced movements. Let's consider the nature of the path. The current vertexvvhas a parent of parentuu. Let there be an odd move now, and the robot will go to the parent ofvv. If we're lucky, it'll go touu. Otherwise, it will go to the brother of vertexvv. But this won't change anything\u00a0\u2014 the next step the robot will do the same thing again. For vertexvvand all its brothers, the answer is the same. Letd[v]d[v]be the answer for vertexvv, and letxxbe the number of brothers of vertexvv, including itself. Thend[v]=2+1d+1\u22c5d[u]+dd+1\u22c5d[v]d[v]=2+1d+1\u22c5d[u]+dd+1\u22c5d[v], whenced[v]=d[u]+2\u22c5(x+1)d[v]=d[u]+2\u22c5(x+1).We can see that our path consists of blocks of height22\u2014 the robot tries to overcome the next block until it succeeds, and then proceeds to the next one.We are now ready to answer the queries. Performing an operation is essentially skipping a block\u00a0\u2014 the robot will pass it on the first try, spending not2\u22c5(x+1)2\u22c5(x+1)actions on it, but22. Therefore we will delete blocks with the largestxxgreedily. We will traverse the graph and store two sets of degrees of vertices on the path to the root\u00a0\u2014 one for vertices with odd depth, and the other for vertices with even depth. We will answer requests offline. Having detected a query, we will run through the firstppelements of the corresponding set and subtract them.Asymptotics of the trivial implementation, in which for each query we move up to the root, isO(n\u22c5q)O(n\u22c5q).Asymptotics of a possible offline solution, where we will maintain sets of vertices while traversing the graph, isO(n+\u2211ipi\u22c5set)O(n+\u2211ipi\u22c5set)."
}