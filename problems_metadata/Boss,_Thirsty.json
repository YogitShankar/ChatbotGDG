{
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "dp",
        "greedy",
        "implementation",
        "*2500"
    ],
    "solution": "2021D - Boss, ThirstyWe can see it as a grid of square tiles, consisting ofnnrows andmmcolumns. Consider a single row. Instead of looking at themmtiles, we can look at them+1m+1edges between tiles, including the leftmost edge and the rightmost edge. We number the edges from00tommsuch that tilejj(1\u2264j\u2264m1\u2264j\u2264m) is the tile between edgej\u22121j\u22121and edgejj.For a single rowii, choosing a segment of tiles is equivalent to choosing two different edgesllandrr(0\u2264l<r\u2264m0\u2264l<r\u2264m) as the endpoints of the segment, which denotes choosing the tiles froml+1l+1torr. For each edgejj, we can precompute a prefix sumpref[j]=Ai,1+Ai,2+\u2026+Ai,jpref[j]=Ai,1+Ai,2+\u2026+Ai,j. That means, choosing edgesllandrryields a profit ofpref[r]\u2212pref[l]pref[r]\u2212pref[l].Let's say we've chosen edgesl\u2032l\u2032andr\u2032r\u2032for rowi\u22121i\u22121and we want to choose two edgesllandrrfor rowiithat satisfies the problem requirement. We want to choose a continuous segment that includes at least one chosen tile and at least one unchosen tile from the previous row. A chosen tile that is adjacent to an unchosen tile only appears at the endpoints of the previous segment. That means, to satisfy the requirement, the new segment must strictly contain at least one endpoint of the previous segment. More formally, at least one of the following conditions must be satisfied:l<l\u2032<rl<l\u2032<rl<r\u2032<rl<r\u2032<rKnowing that, we can see that when going from one row to the next, we only need the information for one of the two endpoints, not both.We can solve this with dynamic programming from row11to rownn. For each row, we find the optimal profit for eachlland the optimal profit for eachrr. We do those two things separately. For each rowii, define the following things:dpL[i][l]dpL[i][l]: the optimal profit for the firstiirows if the left endpoint of the last segment isll.dpR[i][r]dpR[i][r]: the optimal profit for the firstiirows if the right endpoint of the last segment isrr.Let's say we've calculated all values ofdpLdpLanddpRdpRfor rowi\u22121i\u22121and we want to calculate for rowii. Letllandrrbe the left and right endpoints of the new segment respectively. Letppbe one of the endpoints of the previous segment. Then it must hold thatl<p<rl<p<r, which yields a maximum profit of\u2212pref[l]+max(dpL[i\u22121][p],dpR[i\u22121][p])+pref[r]\u2212pref[l]+max(dpL[i\u22121][p],dpR[i\u22121][p])+pref[r].Let's calculate all values ofdpRdpRfirst for rowii. For eachrr, we want to consider all corresponding triples(l,p,r)(l,p,r)and find the maximum profit among them. In order to do that, we do three steps:Make a prefix maximum of\u2212pref[l]\u2212pref[l].Then, for eachpp, we addmax(dpL[i-1][p],dpR[i\u22121][p])max(dpL[i-1][p],dpR[i\u22121][p])with the maximum value of\u2212pref[l]\u2212pref[l]for all0\u2264l<j0\u2264l<j. And then we make a prefix maximum of those values.Then, for eachrr, the value ofdpR[i][r]dpR[i][r]ispref[r]pref[r]added by the maximum value for the previous calculation for eachppfrom00tor\u22121r\u22121.We do the same thing fordpLdpLbut we use suffix maxmiums instead.After doing all that for every row from11tonn, we find the maximum value ofdpLdpLanddpRdpRin the last row to get the answer.Time complexity of each test case:O(nm)O(nm)"
}