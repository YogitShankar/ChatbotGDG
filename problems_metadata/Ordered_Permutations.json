{
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "bitmasks",
        "combinatorics",
        "constructive algorithms",
        "greedy",
        "math",
        "two pointers",
        "*1600"
    ],
    "solution": "[problem:2040C]These permutations are generated as follows. We will greedily go through the numbers in order from11tonn, and we will put each one either in the first free cell or in the last one. For example, if we want to put44in the permutation1,3,\u2218,\u2218,\u2026,\u2218,21,3,\u2218,\u2218,\u2026,\u2218,2, we can put it either in the third cell or in the second from the end. That is, the permutation first increases and then decreases.We can prove that the greedy algorithm works like this. Let us now want to put the numberii. When we put this number, we can immediately say that the minimum on the segments, one of the ends of which is the chosen position, is equal toii(we do not take into account already placed numbers smaller thanii). The number of these segments is equal ton\u2212i+1n\u2212i+1. The answer we get is equal to the sum of this fixed number and what we get in the future. Assume we put the numberiinot at the end of the array. Let's consider the optimal further answer:[\u2026,xj,\u2026]i[\u2026,xj,\u2026][\u2026,xj,\u2026]i[\u2026,xj,\u2026]. Now let's putiiat the end of the array and leave the order of the following elements unchanged. All segments whose ends lie on elements that are larger thaniimay no longer cover the numberii, but the sets of numbers larger thaniithat they cover have not changed. So the answer got better.Since we choose one of the ends independently, there are2n\u221212n\u22121of such permutations, and we can find thekk-th one using a simple loop, similar to converting a number into binary notation."
}