{
    "time_limit": "6 seconds",
    "memory_limit": "512 megabytes",
    "tags": [
        "*special problem",
        "*3200"
    ],
    "solution": [
        "In this problem, most people were submitting solutions working in O((n+q)A\u2212\u2212\u221alogn)O((n+q)Alog\u2061n), where AA is the maximum monster health value. A good implementation with this complexity might pass, but the model solution has a slightly better complexity: O((n+q)Alogn\u2212\u2212\u2212\u2212\u2212\u2212\u221a)O((n+q)Alog\u2061n).",
        "The main idea is that if we process the first MM monsters for a query naively, then the total strength of zombies becomes at least MM, so for every remaining monster, we will use at most AMAM turns.",
        "For every monster ii and every value jj from 11 to AMAM we find the minimum left border ll such that, if we consider a query with left border ll, we need at least jj operations to kill the monster. It means that the total strength of all monsters from ll to i\u22121i\u22121 is less than \u2308aij\u22121\u2309\u2308aij\u22121\u2309 (this is the minimum total strength that allows killing the ii-th monster in less than jj turns). Using prefix sums, we can find every such border in O(logn)O(log\u2061n): let sisi be the total strength of the first ii monsters. Then, if we consider monsters in 00-indexation, we need the minimum ll such that \u2308aij\u22121\u2309>si\u2212sl\u2308aij\u22121\u2309>si\u2212sl. In other words, we need the minimum ll such that sl>si\u2212\u2308aij\u22121\u2309sl>si\u2212\u2308aij\u22121\u2309, and we can use binary search to find it. Let's remember that in this left border ll the number of turns required to kill the ii-th monster increases by 11.",
        "Then, we use a sweep line approach. Sort all queries according to their left borders, and maintain a data structure that allows adding +1+1 to a single element and querying the sum on a segment (Fenwick tree, for example). In this structure, for every monster, we store the number of turns required to kill it, considering the current left border. When the left border gets moved from l\u22121l\u22121 to ll, we add 11 to every monster, for which the number of turns increases (it might increase more than by 11 for some monsters, but we can handle it because we precalculated the left border for every monster and every number of turns required to kill it).",
        "When we process a query with left border ll, our Fenwick tree stores the values of min(AM,cnti,l)min(AM,cnti,l) for the monsters, where cnti,lcnti,l is the number of turns to kill the ii-th monster when we start from the left border ll. Process the first MM monsters in the query in O(M)O(M), so our Fenwick tree stores the \"actual\" values for all remaining monsters, and use a range sum query to process the remaining monsters in O(logn)O(log\u2061n).",
        "We get O(nAMlogn)O(nAMlog\u2061n) for preprocessing and O(M+logn)O(M+log\u2061n) for each query. If we choose MM close to Alogn\u2212\u2212\u2212\u2212\u2212\u2212\u221aAlog\u2061n, the solution complexity becomes O((n+q)Alogn\u2212\u2212\u2212\u2212\u2212\u2212\u221a)O((n+q)Alog\u2061n)."
    ]
}