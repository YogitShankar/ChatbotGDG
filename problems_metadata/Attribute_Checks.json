{
    "time_limit": "2.5 seconds",
    "memory_limit": "512 megabytes",
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "implementation",
        "math",
        "two pointers",
        "*1800"
    ],
    "solution": "2025D - Attribute ChecksFor the start, let's introduce a slow but correct solution. Letd[i][I]d[i][I]be the answer to the task if we processed firstiirecords and the current Intelligence level isII. If we know Intelligence levelII, then we also know the current Strength levelS=P\u2212IS=P\u2212I, wherePPis just a total number of points in firstiirecords.Since we want to use dp, let's discuss transitions:If the last recordri=0ri=0, then it was a point, and there are only two options:we either raised Intelligence, so the last state wasd[i\u22121][I\u22121]d[i\u22121][I\u22121];or raised Strength, coming from stated[i\u22121][I]d[i\u22121][I].In other words, we can calculated[i][I]=max(d[i\u22121][I\u22121],d[i\u22121][I])d[i][I]=max(d[i\u22121][I\u22121],d[i\u22121][I]).If the last recordri>0ri>0, then it's an Intelligence check, and it doesn't affect the state, only its answer. For allI\u2265riI\u2265ri,d[i][I]=d[i\u22121][I]+1d[i][I]=d[i\u22121][I]+1; otherwise, it'sd[i][I]=d[i\u22121][I]d[i][I]=d[i\u22121][I].Ifri<0ri<0, then it's a Strength check and affects the values in a similar way. For allI\u2264P+riI\u2264P+ri,d[i][I]=d[i\u22121][I]+1d[i][I]=d[i\u22121][I]+1; otherwise, it's alsod[i][I]=d[i\u22121][I]d[i][I]=d[i\u22121][I].OK, we've got a solution withO(nm)O(nm)time and memory, but we can speed it up. Note that the first case appears onlyO(m)O(m)times, while the second and third cases are just range additions. So, if we can do addition inO(1)O(1), then processing the first case in linear time is enough to achieveO(m2+n)O(m2+n)complexity.How to process range additions inO(1)O(1)time? Let's use some difference arrayaato do it lazily. Instead of adding some valuevvto the segment[l,r][l,r], we'll only add valuevvtoa[l]a[l]and\u2212v\u2212vtoa[r+1]a[r+1]. And when we meetri=0ri=0, we'll \"push\" all accumulated operations all at once.The total value you need to add to some positioniiis\u2211ij=0a[i]\u2211j=0ia[i]. So, we can calculate all of them inO(m)O(m)just going from left to right, maintaining the prefix sum.The last question is reducing the space complexity. As usual, you can store only the last two layers: for the current layeriiand previous layeri\u22121i\u22121. But actually, you can store only one layer and update it in-place.Let's store only one last layer of dp asd[I]d[I]. Attribute checks don't change arrayddat all. In caseri=0ri=0, you, firstly, push all data fromaatodd, and then you need to recalc values indd. But since the formula isd[I]=max(d[I],d[I\u22121])d[I]=max(d[I],d[I\u22121]), you can just iterate overIIindescending orderand everything works!In total, we have a solution withO(m2+n)O(m2+n)time andO(m)O(m)space complexity."
}