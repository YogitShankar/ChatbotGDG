{
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "number theory",
        "*1700"
    ],
    "solution": "2039D - Shohag Loves GCDTHOUGHT:For problems where we need to construct something under some conditions, then a good idea is to first see the nature of the sequences that satisfy the conditions. And to find the properties of such sequences we can try to find some necessary conditions that must have to be met for the sequence to satisfy the conditions.ACTION:The given condition is thatagcd(i,j)\u2260gcd(ai,aj)agcd(i,j)\u2260gcd(ai,aj)alli<ji<j. As the given operation is gcd on indices and values, it's hard to directly find the properties of the sequence.But what happens wheniidividesjj? Thenagcd(i,j)=aiagcd(i,j)=ai. So the condition becomesai\u2260gcd(ai,aj)ai\u2260gcd(ai,aj)which translates toaiaican not divideajajbecause otherwisegcd(ai,aj)=aigcd(ai,aj)=ai.So we have found a necessary condition: for any pairi<ji<jwhereiidividesjj,aiaican not divideajaj.THOUGHT:Hmm, but is the condition sufficient? One way to check the sufficiency is to find a contradiction.ACTION:Imagine two indicesiiandjjwhereiidoes not dividejjbut the condition is violated:agcd(i,j)=gcd(ai,aj)agcd(i,j)=gcd(ai,aj).Theng=gcd(i,j)g=gcd(i,j)is a divisor of bothiiandjjand asagagdivides bothaiaiandajaj, so for pair(g,i)(g,i)we haveagcd(g,i)=agagcd(g,i)=agandgcd(ag,ai)=aggcd(ag,ai)=agbecauseagagdividesaiai. So for this pair the condition is violated!So if the condition is violated for some pair(i,j)(i,j)then it is violated for the pair(g,i)(g,i)and(g,j)(g,j)as well whereg=gcd(i,j)g=gcd(i,j).So if there is no pair(i,j)(i,j)whereiidividesjjand the condition is violated, then all the pairs also satisfy the condition. This proves the sufficiency of the condition.THOUGHT:So we have found a necessary and sufficient condition. Now we need to construct the lexicographically largest sequence that satisfies the condition.Solution 1:Consider amultiple chaini1<i2<\u2026<iki1<i2<\u2026<ik. Such thati1i1dividesi2i2,i2i2dividesi3i3, ...,ik\u22121ik\u22121dividesikik.Then we know that we have to put distinct values for all the indices in themultiple chainotherwise one number will be divisible by another which will violate the condition.And as we are aiming for the lexicographically largest sequence, it makes sense to put the values in decreasing order in amultiple chaini.e.ai1>ai2>\u2026>aikai1>ai2>\u2026>aik. This way we don't have to care about the divisibility condition, as the numbers are in decreasing order.Now, we definitely will try to put the largest number possible for each index. So what is the largest number that we can put for the indexxx?Consider a directed graph where there is an edge fromiitojjifiidividesjj. Then the question is what is the length of the longest path in this graph ending atxx.You can find it using a simple DP on this directed acyclic graph inO(nlogn)O(nlog\u2061n)time.But if you think about it, the answer is actually simple. Letp(x)p(x)the number of prime factors ofxxcounted with multiplicity. Then the answer isp(x)+1p(x)+1. For example, ifx=2\u22c532\u22c55x=2\u22c532\u22c55, then one of the longest chains ending atxxis1\u21922\u21922\u22c53\u21922\u22c532\u21922\u22c532\u22c551\u21922\u21922\u22c53\u21922\u22c532\u21922\u22c532\u22c55which has length44.We can precalculate the valuesp(x)p(x)for all1\u2264x\u2264n1\u2264x\u2264ninO(nlogn)O(nlog\u2061n)time using sieve.So at indexiiwe will put the (p(i)+1p(i)+1)-th largest number from the setSS. And the largest value ofp(i)p(i)for1\u2264i\u2264n1\u2264i\u2264nis\u230alog2n\u230b\u230alog2\u2061n\u230bfor the chain1\u21922\u219222\u2192\u2026\u21922\u230alog2n\u230b1\u21922\u219222\u2192\u2026\u21922\u230alog2\u2061n\u230b.So ifm<\u230alog2n\u230b+1m<\u230alog2\u2061n\u230b+1, then we can't construct the sequence and the answer is\u22121\u22121. Otherwise setai=sm\u2212p(i)ai=sm\u2212p(i)for allii.Also, unless you have noticed already, the actual numbers don't matter!Time Complexity:O(nlogn)O(nlog\u2061n)Solution 2:As we are trying to construct the lexicographically largest sequence, it's always better to take larger values first. Letsisibe theii-th smallest number in the setSS.So, initially seta1=sma1=sm. Then we can't usesmsmfor any other index as it will violate the condition.Then seta2=sm\u22121a2=sm\u22121(because we can't usesmsm). Then we can't usesm\u22121sm\u22121for any other indexjjwherejjis divisible by22as it will violate the condition.Then seta3=sm\u22121a3=sm\u22121(because we can't usesmsm). Then we can't usesm\u22121sm\u22121for any other indexjjwherejjis divisible by33as it will violate the condition.Now seta4=sm\u22122a4=sm\u22122(because we can't usesm\u22121sm\u22121orsmsm). Then we can't usesm\u22122sm\u22122for any other indexjjwherejjis divisible by44as it will violate the condition.Then fora5a5we can actually usesm\u22121sm\u22121as55is not divisible by2,3,2,3,or44so the only constraint is thata5\u2260a1a5\u2260a1....Notice that this is a sieve-like process where we are using the maximum number that we can use for the current index and then we are remembering that in the multiples of the current index, the current number can't be used. We can use sets to simulate the process.So this process will always construct a valid lexicographically largest sequence. If it is not possible to construct the sequence, then the answer is\u22121\u22121.Also, if you notice the construction process carefully, the actual numbers don't matter!Time Complexity:O(nlog2n)O(nlog2\u2061n)"
}