{
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "data structures",
        "greedy",
        "math",
        "sortings",
        "*1900"
    ],
    "solution": [
        "Let's sort the array in descending order based on the array bb. For a fixed set of Alice's items, Bob will take the first kk of them for free (because they are the most expensive) and pay for the rest.",
        "Now we can iterate over the first item that Bob will pay (denote it as ii). Alice has to buy the cheapest kk items among 1,2,\u2026,i\u221211,2,\u2026,i\u22121 (denote the sum of these values as ff), because Bob can take them for free. Bob has to pay for each of the items among i,i+1,\u2026,ni,i+1,\u2026,n that Alice will buy. So Alice will buy all the items with bi\u2212ai>0bi\u2212ai>0 (denote the sum of these values as pp). Then the Alice's profit is p\u2212fp\u2212f.",
        "Thus, we got a solution that works in O(n2)O(n2). In order to speed up this solution, we have to calculate the values ff and pp faster than O(n)O(n). We can do it as follows: while iterating over the value of ii, let's store \"free\" items in the ordered set, and when the size of this set becomes larger than kk, remove the most expensive element from it; and the value of pp can be calculated using prefix sums (over the values max(0,bi\u2212ai)max(0,bi\u2212ai)) or maintaining a variable (and update it when moving to the next value of ii)."
    ]
}