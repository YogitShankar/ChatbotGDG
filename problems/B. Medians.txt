You are given an array a=[1,2,…,n]a=[1,2,…,n], where nn is odd, and an integer kk.Your task is to choose an odd positive integer mm and to split aa into mm subarrays†† b1,b2,…,bmb1,b2,…,bm such that:  Each element of the array aa belongs to exactly one subarray.  For all 1≤i≤m1≤i≤m, |bi||bi| is odd, i.e., the length of each subarray is odd.  median([median(b1),median(b2),…,median(bm)])=kmedian([median(b1),median(b2),…,median(bm)])=k, i.e., the median‡ of the array of medians of all subarrays must equal k. median(c) denotes the median of the array c. †A subarray of the array a of length n is the array [al,al+1,…,ar] for some integers 1≤l≤r≤n.‡A median of the array of odd length is the middle element after the array is sorted in non-decreasing order. For example: median([1,2,5,4,3])=3, median([3,2,1])=2, median([2,1,2,1,2,2,2])=2.

Each test consists of multiple test cases. The first line contains a single integer t (1≤t≤5000) — the number of test cases. The description of the test cases follows.The first line of each test case contains two integers n and k (1≤k≤n<2⋅105, n is odd) — the length of array a and the desired median of the array of medians of all subarrays.It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.

For each test case:  If there is no suitable partition, output −1 in a single line.  Otherwise, in the first line, output an odd integer m (1≤m≤n), and in the second line, output m distinct integers p1,p2,p3,…,pm (1=p1<p2<p3<…<pm≤n) — denoting the left borders of each subarray. In detail, for a valid answer [p1,p2,…,pm]:  b1=[ap1,ap1+1,…,ap2−1]  b2=[ap2,ap2+1,…,ap3−1]  …  bm=[apm,apm+1,…,an]. If there are multiple solutions, you can output any of them.

Input
4 1 1 3 2 3 3 15 8

Output
1
1
3
1 2 3
-1
5
1 4 7 10 13
