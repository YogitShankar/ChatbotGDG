{
    "url": "https://codeforces.com/problemset/problem/2046/F2",
    "title": "F2. Yandex Cuneiform (Hard Version)",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy",
        "implementation",
        "*3500"
    ],
    "content": "F2. Yandex Cuneiform (Hard Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard output This is the hard version of the problem. The difference between the versions is that in this version, there is no restriction on the number of question marks. You can hack only if you solved all versions of this problem. For a long time, no one could decipher Sumerian cuneiform. However, it has finally succumbed to pressure! Today, you have the chance to decipher Yandex cuneiform.Yandex cuneiform is defined by the following rules:   An empty string is a Yandex cuneiform.  If you insert exactly one copy of each of the three letters 'Y', 'D', and 'X' into a Yandex cuneiform in such a way that no two adjacent letters become equal after the operation, you obtain a Yandex cuneiform.  If a string can't be obtained using the above rules, it is not a Yandex cuneiform. You are given a template. A template is a string consisting of the characters 'Y', 'D', 'X', and '?'.You need to check whether there exists a way to replace each question mark with 'Y', 'D', or 'X' to obtain a Yandex cuneiform, and if it exists, output any of the matching options, as well as a sequence of insertion operations to obtain the resulting cuneiform.In this version of the problem, the number of question marks in the template can be arbitrary.InputEach test contains multiple test cases. The first line contains the number of test cases \ud835\udc61t (1\u2264\ud835\udc61\u22645\u22c51041\u2264t\u22645\u22c5104). The description of the test cases follows. Each test case consists of a single line containing a template of length \ud835\udc5bn (3\u2264\ud835\udc5b<2\u22c51053\u2264n<2\u22c5105, \ud835\udc5bmod3=0nmod3=0), consisting only of characters 'Y', 'D', 'X', and '?'.It is guaranteed that the sum of \ud835\udc5bn over all test cases does not exceed 2\u22c51052\u22c5105. OutputFor each test case, output a single line containing 'NO' if it is not possible to obtain a cuneiform from the given template.Otherwise, output 'YES' on the first line, and on the second line, any obtainable cuneiform. After that, you need to output the sequence of operations that leads to the cuneiform you printed.A sequence of operations is described by \ud835\udc5b3n3 triples of pairs. A pair has the form c p, where \ud835\udc50c is one of the letters 'Y', 'D', or 'X', and \ud835\udc5dp is the position at which the letter \ud835\udc50c should be inserted. The insertion position is the number of letters to skip from the beginning of the string for the insertion. For example, after inserting the character 'D' into the string \"YDX\" with \ud835\udc5d=3p=3, the result is \"YDXD\", and with \ud835\udc5d=0p=0, it is \"DYDX\". Note that the index cannot exceed the current length of the string.The operations are applied from top to bottom, left to right. After inserting each triple to the string, there should be no two adjacent identical characters.ExampleInputCopy4???Y??D?X???D??DXYXYXOutputCopyYES\nYDX\nX 0 D 0 Y 0 \nYES\nYDXDYX\nX 0 Y 0 D 1\nX 2 D 3 Y 4\nYES\nYDX\nY 0 D 1 X 2\nNO\nNoteIn the second example, the string is transformed like this: \"\"\u2192\ud835\ude88\ud835\ude73\ud835\ude87\u2192\ud835\ude88\ud835\ude73\ud835\ude87\ud835\ude73\ud835\ude88\ud835\ude87\"\"\u2192YDX\u2192YDXDYX...."
}