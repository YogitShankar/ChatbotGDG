{
    "url": "https://codeforces.com/problemset/problem/2029/I",
    "title": "I. Variance Challenge",
    "tags": [
        "flows",
        "graphs",
        "greedy",
        "*3400"
    ],
    "content": "I. Variance Challengetime limit per test6 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputKevin has recently learned the definition of variance. For an array \ud835\udc4ea of length \ud835\udc5bn, the variance of \ud835\udc4ea is defined as follows:  Let \ud835\udc65=1\ud835\udc5b\u2211\ud835\udc56=1\ud835\udc5b\ud835\udc4e\ud835\udc56x=1n\u2211i=1nai, i.e., \ud835\udc65x is the mean of the array \ud835\udc4ea;  Then, the variance of \ud835\udc4ea is \ud835\udc49(\ud835\udc4e)=1\ud835\udc5b\u2211\ud835\udc56=1\ud835\udc5b(\ud835\udc4e\ud835\udc56\u2212\ud835\udc65)2.V(a)=1n\u2211i=1n(ai\u2212x)2. Now, Kevin gives you an array \ud835\udc4ea consisting of \ud835\udc5bn integers, as well as an integer \ud835\udc58k. You can perform the following operation on \ud835\udc4ea:  Select an interval [\ud835\udc59,\ud835\udc5f][l,r] (1\u2264\ud835\udc59\u2264\ud835\udc5f\u2264\ud835\udc5b1\u2264l\u2264r\u2264n), then for each \ud835\udc59\u2264\ud835\udc56\u2264\ud835\udc5fl\u2264i\u2264r, increase \ud835\udc4e\ud835\udc56ai by \ud835\udc58k. For each 1\u2264\ud835\udc5d\u2264\ud835\udc5a1\u2264p\u2264m, you have to find the minimum possible variance of \ud835\udc4ea after exactly \ud835\udc5dp operations are performed, independently for each \ud835\udc5dp.For simplicity, you only need to output the answers multiplied by \ud835\udc5b2n2. It can be proven that the results are always integers.InputEach test contains multiple test cases. The first line of the input contains a single integer \ud835\udc61t (1\u2264\ud835\udc61\u22641001\u2264t\u2264100)\u00a0\u2014 the number of test cases. The description of test cases follows.The first line of each test case contains three integers \ud835\udc5bn, \ud835\udc5am, and \ud835\udc58k (1\u2264\ud835\udc5b,\ud835\udc5a\u226450001\u2264n,m\u22645000, \ud835\udc5b\u22c5\ud835\udc5a\u22642\u22c5104n\u22c5m\u22642\u22c5104, 1\u2264\ud835\udc58\u22641051\u2264k\u2264105)\u00a0\u2014 the length of the array \ud835\udc4ea, the maximum number of operations, and the number you add to \ud835\udc4e\ud835\udc56ai each time, respectively.The second line contains \ud835\udc5bn integers \ud835\udc4e1,\ud835\udc4e2,\u2026,\ud835\udc4e\ud835\udc5ba1,a2,\u2026,an (1\u2264\ud835\udc4e\ud835\udc56\u22641051\u2264ai\u2264105)\u00a0\u2014 the elements of the array \ud835\udc4ea.It is guaranteed that the sum of \ud835\udc5b\u22c5\ud835\udc5an\u22c5m over all tests does not exceed 2\u22c51042\u22c5104.OutputFor each test case, output \ud835\udc5am integers in a single line, the \ud835\udc5dp-th integer denoting the minimum possible variance of \ud835\udc4ea when exactly \ud835\udc5dp operations are performed, multiplied by \ud835\udc5b2n2.ExampleInputCopy93 2 11 2 23 2 21 2 210 2 110 1 1 1 1 10 1 1 1 16 8 21 1 4 5 1 38 8 720 43 24 2 4 3 20 438 8 320 43 24 2 4 3 20 4310 12 15 3 3 5 4 1 8 1 1 113 10 1000001 2 3 4 5 6 7 8 9 10 11 5 410 5 100002308 9982 4435 3310 100000 9 7 8100 1919 100000OutputCopy0 0\n2 2\n1161 1024\n53 21 21 5 5 5 5 5\n10608 6912 4448 3104 1991 1312 535 304\n13248 11184 9375 7815 6447 5319 4383 3687\n385 316 269 224 181 156 124 101 80 56 41 29\n1486 1486 1486 1486 1486 1486 1486 1486 1486 1486\n134618047140 119919447140 107020847140 93922247140 82623647140\nNoteIn the first test case:   For \ud835\udc5d=1p=1, you can perform the operation on [1,1][1,1], changing \ud835\udc4ea from [1,2,2][1,2,2] to [2,2,2][2,2,2]. Since all of the elements are equal, the variance is equal to 00.  For \ud835\udc5d=2p=2, you can perform the operation on [1,3][1,3] and then [1,1][1,1], changing \ud835\udc4ea from [1,2,2][1,2,2] to [2,3,3][2,3,3] to [3,3,3][3,3,3]. Since all of the elements are equal, the variance is equal to 00. In the second test case, some possible optimal choices are:  \ud835\udc5d=1p=1: [1,\u23af\u23af\u23af2,2]\u2192[3,2,2][1,_2,2]\u2192[3,2,2];  \ud835\udc5d=2p=2: [1,2,2\u23af\u23af\u23af\u23af\u23af\u23af]\u2192[1,\u23af\u23af\u23af4,4]\u2192[3,4,4][1,2,2_]\u2192[1,_4,4]\u2192[3,4,4]. In the third test case, some possible optimal choices are:  \ud835\udc5d=1p=1: [10,1,1,1,1,10,1,1,1,1\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af]\u2192[10,2,2,2,2,11,2,2,2,2][10,1,1,1,1,10,1,1,1,1_]\u2192[10,2,2,2,2,11,2,2,2,2];  \ud835\udc5d=2p=2: [10,1,1,1,1,10,1,1,1,1\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af]\u2192[10,1,1,1,1\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af\u23af,10,2,2,2,2]\u2192[10,2,2,2,2,10,2,2,2,2][10,1,1,1,1,10,1,1,1,1_]\u2192[10,1,1,1,1_,10,2,2,2,2]\u2192[10,2,2,2,2,10,2,2,2,2]. In the eighth test case, the optimal choice for all \ud835\udc5dp is to perform the operation on the whole array \ud835\udc5dp times...."
}