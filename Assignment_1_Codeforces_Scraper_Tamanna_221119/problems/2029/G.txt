G. Balanced Problemtime limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputThere is an array 𝑎a consisting of 𝑛n integers. Initially, all elements of 𝑎a are equal to 00.Kevin can perform several operations on the array. Each operation is one of the following two types: Prefix addition — Kevin first selects an index 𝑥x (1≤𝑥≤𝑛1≤x≤n), and then for each 1≤𝑗≤𝑥1≤j≤x, increases 𝑎𝑗aj by 11;  Suffix addition — Kevin first selects an index 𝑥x (1≤𝑥≤𝑛1≤x≤n), and then for each 𝑥≤𝑗≤𝑛x≤j≤n, increases 𝑎𝑗aj by 11.In the country of KDOI, people think that the integer 𝑣v is balanced. Thus, Iris gives Kevin an array 𝑐c consisting of 𝑛n integers and defines the beauty of the array 𝑎a as follows: Initially, set 𝑏=0b=0;  For each 1≤𝑖≤𝑛1≤i≤n, if 𝑎𝑖=𝑣ai=v, add 𝑐𝑖ci to 𝑏b;  The beauty of 𝑎a is the final value of 𝑏b.Kevin wants to maximize the beauty of 𝑎a after all the operations. However, he had already performed 𝑚m operations when he was sleepy. Now, he can perform an arbitrary number (possibly zero) of new operations.You have to help Kevin find the maximum possible beauty if he optimally performs the new operations.However, to make sure that you are not just rolling the dice, Kevin gives you an integer 𝑉V, and you need to solve the problem for each 1≤𝑣≤𝑉1≤v≤V.InputEach test contains multiple test cases. The first line of the input contains a single integer 𝑡t (1≤𝑡≤10001≤t≤1000) — the number of test cases. The description of test cases follows.The first line of each test case contains three integers 𝑛n, 𝑚m, and 𝑉V (1≤𝑛,𝑚≤2⋅1051≤n,m≤2⋅105, 1≤𝑉≤20001≤V≤2000) — the length of the array 𝑎a, the number of initial operations, and the number that Kevin gives you.The second line contains 𝑛n integers 𝑐1,𝑐2,…,𝑐𝑛c1,c2,…,cn (1≤𝑐𝑖≤1091≤ci≤109) — the elements in the array 𝑐c.Then 𝑚m lines follow, the 𝑖i-th line containing a character 𝑜𝑝op and an integer 𝑥x (𝑜𝑝=𝙻op=L or 𝚁R, 1≤𝑥≤𝑛1≤x≤n) — the type of the 𝑖i-th operation and the selected index.  If 𝑜𝑝=𝙻op=L, this operation is a prefix addition on index 𝑥x;  If 𝑜𝑝=𝚁op=R, this operation is a suffix addition on index 𝑥x. It is guaranteed that:  the sum of 𝑛n over all test cases does not exceed 2⋅1052⋅105;  the sum of 𝑚m over all test cases does not exceed 2⋅1052⋅105;  the sum of 𝑉2V2 over all test cases does not exceed 4⋅1064⋅106. OutputFor each test case, output 𝑉V integers in a single line, the 𝑖i-th integer denoting the maximum possible beauty after Kevin performs some new operations when 𝑣=𝑖v=i.ExampleInputCopy53 3 21 2 4L 3R 3L 13 3 25 1 4L 3R 3L 15 4 51 1 1 1 1L 3R 2L 5L 410 12 910 9 8 7 6 5 4 3 2 1L 2L 4R 4R 4L 6R 8L 3L 2R 1R 10L 8L 11 1 41000000000L 1OutputCopy2 6
1 9
0 1 3 5 5
0 0 0 6 25 32 35 44 51
1000000000 1000000000 1000000000 1000000000
NoteIn the first test case, the array 𝑎a changes as follows for the initial operations: [0,0,0]−→−𝙻 3[1,1,1]−→−𝚁 3[1,1,2]−→−𝙻 1[2,1,2][0,0,0]→L 3[1,1,1]→R 3[1,1,2]→L 1[2,1,2].  For 𝑣=1v=1, it is optimal to not perform any new operations, and the beauty is 𝑏=𝑐2=2b=c2=2;  For 𝑣=2v=2, it is optimal to perform a prefix addition operation on index 22. After that, 𝑎a becomes [3,2,2][3,2,2], and the beauty is 𝑏=𝑐2+𝑐3=6b=c2+c3=6. In the second test case, for both 𝑣=1v=1 and 𝑣=2v=2, it is optimal to not perform any new operations.