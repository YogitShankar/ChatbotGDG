Problem: B. Permutation Printing
Time Limit: time limit per test1 second
Memory Limit: memory limit per test256 megabytes
Tags: brute force, constructive algorithms, math, *1000

Description:
You are given a positive integer nn.
Find a permutation† p of length n such that there do not exist two distinct indices i and j (1≤i,j<n; i≠j) such that pi divides pj and pi+1 divides pj+1.
Refer to the Notes section for some examples.
Under the constraints of this problem, it can be proven that at least one p exists.
† A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).
Each test contains multiple test cases. The first line contains a single integer t (1≤t≤103) — the number of test cases. The description of the test cases follows.
The first line of each test case contains a single integer n (3≤n≤105) — the length of the permutation p.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, output p1,p2,…,pn.
If there are multiple solutions, you may output any one of them.
In the first test case, p=[4,1,2,3] is a valid permutation. However, the permutation p=[1,2,3,4] is not a valid permutation as we can choose i=1 and j=3. Then p1=1 divides p3=3 and p2=2 divides p4=4. Note that the permutation p=[3,4,2,1] is also not a valid permutation as we can choose i=3 and j=2. Then p3=2 divides p2=4 and p4=1 divides p3=2.
In the second test case, p=[1,2,3] is a valid permutation. In fact, all 6 permutations of length 3 are valid.