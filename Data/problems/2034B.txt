Problem: B. Rakhsh's Revival
Time Limit: time limit per test1 second
Memory Limit: memory limit per test256 megabytes
Tags: data structures, greedy, implementation, two pointers, *1000

Description:
Rostam's loyal horse, Rakhsh, has seen better days. Once powerful and fast, Rakhsh has grown weaker over time, struggling to even move. Rostam worries that if too many parts of Rakhsh's body lose strength at once, Rakhsh might stop entirely. To keep his companion going, Rostam decides to strengthen Rakhsh, bit by bit, so no part of his body is too frail for too long.
Imagine Rakhsh's body as a line of spots represented by a binary string ss of length n, where each 0 means a weak spot and each 1 means a strong one. Rostam's goal is to make sure that no interval of m consecutive spots is entirely weak (all 0s).
Luckily, Rostam has a special ability called Timar, inherited from his mother Rudabeh at birth. With Timar, he can select any segment of length k and instantly strengthen all of it (changing every character in that segment to 1). The challenge is to figure out the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length m.
The first line contains an integer t (1≤t≤104), the number of test cases. 
The first line of each test case contains three numbers n, m, k (1≤m,k≤n≤2⋅105). The second line of each test case contains a binary string s of n characters s1s2…sn. (si∈{0,1} for 1≤i≤n).
It is guaranteed that the sum of n over all test cases does not exceed 2⋅105. 
For each test case, output the minimum number of times Rostam needs to use Timar to keep Rakhsh moving, ensuring there are no consecutive entirely weak spots of length m.
In the first test case, we should apply an operation on each 0.
In the second test case, s is already ok. 
In the third test case, we can perform an operation on interval [3,4] to get 001100.