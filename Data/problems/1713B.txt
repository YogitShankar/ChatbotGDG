Problem: B. Optimal Reduction
Time Limit: time limit per test1 second
Memory Limit: memory limit per test256 megabytes
Tags: constructive algorithms, sortings, *1000

Description:
Consider an array a of n positive integers.
You may perform the following operation: 
Let's call f(a) the minimum number of operations needed to change array a into an array of n zeros.
Determine if for all permutations† b of a, f(a)≤f(b) is true. 
† An array b is a permutation of an array a if b consists of the elements of a in arbitrary order. For example, [4,2,3,4] is a permutation of [3,2,4,4] while [1,2,2] is not a permutation of [1,2,3].
The first line contains a single integer t (1≤t≤104) — the number of test cases.
The first line of each test case contains a single integer n (1≤n≤105) — the length of the array a.
The second line contains n integers a1,a2,…,an (1≤ai≤109) — description of the array a.
It is guaranteed that the sum of n over all test cases does not exceed 105.
For each test case, print "YES" (without quotes) if for all permutations b of a, f(a)≤f(b) is true, and "NO" (without quotes) otherwise.
You can output "YES" and "NO" in any case (for example, strings "yEs", "yes" and "Yes" will be recognized as a positive response).
In the first test case, we can change all elements to 0 in 5 operations. It can be shown that no permutation of [2,3,5,4] requires less than 5 operations to change all elements to 0.
In the third test case, we need 5 operations to change all elements to 0, while [2,3,3,1] only needs 3 operations.